{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Geo Activity Playground is a software to view recorded outdoor activities and derive various insights from your data collection. All data is kept on your machine, hence it is suitable for people who have an affinity for data analysis and privacy.</p> <p>It caters to serve a similar purpose as other systems like Strava, Statshunters or VeloViewer, though the focus here is on self-hosting and using local files.</p> <p>One can use this program with a local collection of activity files (GPX, FIT, TCX, KML, CSV) or via the Strava API. The latter is appealing to people who want to keep their data with Strava primarily. In case that one wants to move, this might provide a noncommittal way of testing out this project.</p> <p>The main user interface is web-based, you can run this on your Linux, Mac or Windows laptop. If you want, it can also run on a home server or your personal cloud instance.</p>"},{"location":"#screenshot-tour","title":"Screenshot tour","text":"<p>This is the view of a single activity:</p> <p></p> <p>You also get a beautiful interactive heatmap of all your activities:</p> <p></p> <p>Also there are plenty of summary statistics that lets you track how many rides, walks or hikes you have done:</p> <p></p> <p>If you're into explorer tiles or squadratinhos, this got you covered:</p> <p></p> <p>The configuration options are available within the interface such that you do not have to work with configuration files (like in earlier versions):</p> <p></p>"},{"location":"#get-started","title":"Get started","text":"<p>If you're new, just follow these steps:</p> <ol> <li>Install the software on Linux, Windows or macOS.</li> <li>Create a base directory.</li> <li>Start the webserver.</li> <li>Choose a method to record activities.</li> <li>Import your activities via activity files, connect the Strava API or upload activity files in the web interface.</li> </ol> <p>Have fun. If you're stuck, get help.</p>"},{"location":"#free-software","title":"Free software","text":"<p>You can find the code on GitHub where you can also file issues. If you would like to use this yourself or contribute, feel free to reach out via the contact options from my website. I would especially appreciate improvements to the documentation. If you're familiar with Markdown and GitHub, you can also directly create a pull request. The code is licensed under the very permissive MIT license.</p>"},{"location":"acknowledgments/","title":"Acknowledgments","text":"<p>This project builds on many amazing other projects and would not be possible without them.</p>"},{"location":"acknowledgments/#bootstrap-css","title":"Bootstrap CSS","text":"<p>Writing CSS is not a trivial task. For many projects I have been using the Bootstrap CSS Framework which provides sensible default values, a 12-column grid system and a lot of components. Using this I didn't have to write any CSS myself and just attach a couple of classes to HTML elements.</p>"},{"location":"acknowledgments/#coloredlogs","title":"coloredlogs","text":"<p>Log messages in multiple colors are neat. Using the coloredlogs package we can get these super easily.</p>"},{"location":"acknowledgments/#fitdecode","title":"fitdecode","text":"<p>For reading FIT files I use the fitdecode library which completely handles all the parsing of this file format.</p>"},{"location":"acknowledgments/#flask","title":"Flask","text":"<p>The webserver is implemented with Flask which provides a really easy way to get started. It also ships with a development webserver which is enough for this project at the moment.</p>"},{"location":"acknowledgments/#geojson","title":"GeoJSON","text":"<p>Transferring geographic geometry data from the Python code to Leaflet is easiest with using the GeoJSON format. The official standard RFC is a bit hard to read, rather have a look at the Wikipedia article. And there is an online viewer that you can try out.</p>"},{"location":"acknowledgments/#github","title":"GitHub","text":"<p>For a smooth open source project one needs a place to share the code and collect issues. GitHub provides all of this for free.</p>"},{"location":"acknowledgments/#gpxpy","title":"gpxpy","text":"<p>For reading GPX files I use the gpxpy library. This allows me to read those files without having to fiddle with the underlying XML format.</p>"},{"location":"acknowledgments/#leaflet","title":"Leaflet","text":"<p>The interactive maps on the website are powered by Leaflet, a very easy to use JavaScript library for embedding interactive Open Street Map maps. It can also display GeoJSON geometries natively, of which I also make heavy use.</p>"},{"location":"acknowledgments/#mkdocs","title":"MkDocs","text":"<p>Writing documentation is more fun with a nice tool, therefore I use MkDocs together with Material for MkDocs. This powers this documentation.</p>"},{"location":"acknowledgments/#open-street-map","title":"Open Street Map","text":"<p>All the maps displayed use tiles from the amazing Open Street Map. This map is created by volunteers, the server hosting is for free. Without these maps this project would be quite boring.</p>"},{"location":"acknowledgments/#pandas","title":"Pandas","text":"<p>Working with thousands of activities, thousands of tiles and millions of points makes it necessary to have a good library for number crunching structured data. Pandas offers this and gives good performance and many features.</p>"},{"location":"acknowledgments/#parquet","title":"Parquet","text":"<p>I need to store the intermediate data frames that I generate with Pandas. Storing as JSON has disadvantages because dates are not properly encoded. Also it is a text format and quite verbose. The Parquet format is super fast and memory efficient.</p>"},{"location":"acknowledgments/#poetry","title":"Poetry","text":"<p>For managing all the Python package dependencies I use Poetry which makes it very easy to have all the Python project housekeeping with one tool.</p>"},{"location":"acknowledgments/#python","title":"Python","text":"<p>Almost all of the code here is written in Python, a very nice and versatile programming language with a vast ecosystem of packages.</p>"},{"location":"acknowledgments/#requests","title":"Requests","text":"<p>For doing HTTP requests I use the Requests library. It provides a really easy to use interface for GET and POST requests.</p>"},{"location":"acknowledgments/#scikit-learn","title":"Scikit-learn","text":"<p>Finding out which cluster is the largest one can either be formed as a graph search problem or as a data science problem. Using the Scikit-learn library I can easily use the DBSCAN algorithm to find the clusters of explorer tiles.</p>"},{"location":"acknowledgments/#statshunters","title":"Statshunters","text":"<p>The Statshunters page allows to import the activities from Strava and do analysis like explorer tiles, Eddington number and many other things. This has served as inspiration for this project.</p>"},{"location":"acknowledgments/#strava","title":"Strava","text":"<p>Although I have recorded some of my bike rides, I only really started to record all of them when I started to use Strava. This is a nice platform to track all activities. They also offer a social network feature, which I don't really use. They provide some analyses of the data, but they lack some analyses which I have now implemented in this project.</p>"},{"location":"acknowledgments/#stravalib","title":"stravalib","text":"<p>Strava has an API, and with stravalib there exists a nice Python wrapper. This makes it much easier to interface with Strava.</p>"},{"location":"acknowledgments/#strava-local-heatmap","title":"Strava local heatmap","text":"<p>The Strava local heatmap project provides a script that renders heatmap files from GPX files locally. It has a gorgeous color scheme with a few nifty tricks. The heatmap in this project is inspired by this project that doesn't share the code.</p>"},{"location":"acknowledgments/#tcxreader","title":"tcxreader","text":"<p>Support for the TCX file format is provided via tcxreader.</p>"},{"location":"acknowledgments/#vega-altair","title":"Vega &amp; Altair","text":"<p>Creating plots that look nice in a browser is hard and I don't like writing JavaScript. Fortunately there is Vega for the beautiful plots and Altair as a Python package that generates the necessary JavaScript for me.</p>"},{"location":"acknowledgments/#velo-viewer","title":"Velo Viewer","text":"<p>I never used Velo Viewer myself but many people say good things about it. It has so many statistics and inspired many more projects, including this one.</p>"},{"location":"add-local-bin-to-path/","title":"Add Local Bin to PATH","text":"<p>If you get a \u201ccommand not found\u201d error when starting the program after the installation, you will learn how to fix it in this how-to.</p> <p>On Linux systems there is a variable called <code>PATH</code> that contains the directories where programs are looked up at. The recommended installation method via <code>pipx</code> installs Geo Activity Playground into your local user directory where it will not cause trouble with other programs. Many Linux distributions are configured such that programs in user directories are ignored as a safety measure.</p> <p>Open a terminal and execute the following command line to bring up a text editor to edit your shell profile:</p> <pre><code>xdg-open ~/.profile\n</code></pre> <p>Add a line containing the following at the end of the file:</p> <pre><code>PATH=$PATH:$HOME/.local/bin\n</code></pre> <p>This file will automatically become active after your next login. In order to activate it right now, execute the following:</p> <pre><code>source ~/.profile\n</code></pre> <p>The next step is to create a base directory.</p>"},{"location":"advanced-metadata-extraction/","title":"Advanced Metadata Extraction","text":"<p>If you would like to set the metadata fields or change what part of the filename should be the activity name, you can use a custom directory structure with corresponding regular expressions.</p> <p>An example directory structure:</p> <pre><code>Activities/\n\u251c\u2500 Ride/\n\u2502  \u251c\u2500 Trekking Bike/\n\u2502  \u2502  \u251c\u2500 2024-03-03-17-42-10 Home to Bakery.gpx\n\u251c\u2500 Hike/\n\u2502  \u251c\u2500 Hiking Boots 2019/\n\u2502  \u2502  \u251c\u2500 2024-03-03-11-03-18 Some nice place with Alice and Bob.fit\n</code></pre>"},{"location":"advanced-metadata-extraction/#custom-regular-expressions","title":"Custom Regular expressions","text":"<p>The program uses regular expressions to search for patterns in the relative path (in Activities) and extracts the relevant parts with named capture groups <code>(?P&lt;kind&gt;)</code>, <code>(?P&lt;equipment&gt;)</code>, <code>(?P&lt;name&gt;)</code>.</p> <p>You can use python to test your regular expressions. Read the python re documentation for help.</p> <p><pre><code>import re\nre.search(r'(?P&lt;kind&gt;[^/]+)/(?P&lt;equipment&gt;[^/]+)/(?P&lt;name&gt;[^/.]+)', '/Ride/Trekking Bike/2024-03-03-17-42-10 Home to Bakery.gpx').groupdict()\n</code></pre> <pre><code>{'kind': 'Ride', 'equipment': 'Trekking Bike', 'name': '2024-03-03-17-42-10 Home to Bakery'}\n</code></pre></p> <p>You can add your custom regular expressions under the <code>Admin</code> menu - <code>Settings</code> - <code>Metadata Extraction</code> in the WebUI. Settings are saved in your <code>Playground</code> directory.</p>"},{"location":"advanced-metadata-extraction/#filename-as-name-simple","title":"Filename as Name (simple)","text":"<p>Path:</p> <pre><code>Activities/\n\u251c\u2500 Ride/\n\u2502  \u251c\u2500 Trekking Bike/\n\u2502  \u2502  \u251c\u2500 2024-03-03-17-42-10 Home to Bakery.gpx\n</code></pre> <pre><code>(?P&lt;kind&gt;[^/]+)/(?P&lt;equipment&gt;[^/]+)/(?P&lt;name&gt;[^/.]+)\n</code></pre> <ul> <li>kind: <code>Ride</code></li> <li>equipment: <code>Trekking Bike</code></li> <li>name: <code>2024-03-03-17-42-10 Home to Bakery</code></li> </ul>"},{"location":"advanced-metadata-extraction/#filename-without-date-as-name-useful-for-osmand-naming","title":"Filename without date as Name (useful for OsmAnd naming)","text":"<p>Path:</p> <pre><code>Activities/\n\u251c\u2500 Ride/\n\u2502  \u251c\u2500 Trekking Bike/\n\u2502  \u2502  \u251c\u2500 2024-03-03-17-42-10 Home to Bakery.gpx\n\u2502  \u2502  \u251c\u2500 2024-03-04-16-52-26.gpx\n\u2502  \u2502  \u251c\u2500 2024-04-21_10-28_Sun OsmAnd default track.gpx\n\u2502  \u2502  \u251c\u2500 2024-04-22_07-55_Mon.gpx\n</code></pre> <pre><code>(?P&lt;kind&gt;[^/]+)/(?P&lt;equipment&gt;[^/]+)/[-\\d_ ]+(?P&lt;name&gt;[^/]+)(?:\\.\\w+)+$\n</code></pre> <ul> <li>kind: <code>Ride</code></li> <li>equipment: <code>Trekking Bike</code></li> <li>names: <code>Home to Bakery</code> ; <code></code> ; <code>Sun OsmAnd default track</code> ; <code>Mon</code></li> </ul> <p>Attention, name may be empty if it is not included in the file name. For OsmAnd default naming the weekday is included in the name.</p>"},{"location":"advanced-metadata-extraction/#filename-after-first-space-as-name","title":"Filename after first space as Name","text":"<p>Path:</p> <pre><code>Activities/\n\u251c\u2500 Ride/\n\u2502  \u251c\u2500 Trekking Bike/\n\u2502  \u2502  \u251c\u2500 2024-03-03-17-42-10 Home to Bakery.gpx\n\u2502  \u2502  \u251c\u2500 2024-04-22_07-55_Mon.gpx\n\u2502  \u2502  \u251c\u2500 2024-04-21_10-28_Sun OsmAnd default track.gpx\n</code></pre> <pre><code>(?P&lt;kind&gt;[^/]+)/(?P&lt;equipment&gt;[^/]+)/\\S+ ?(?P&lt;name&gt;[^/\\.]*)\n</code></pre> <ul> <li>kind: <code>Ride</code></li> <li>equipment: <code>Trekking Bike</code></li> <li>names: <code>Home to Bakery</code> ; <code></code> ; <code>OsmAnd default track</code></li> </ul> <p>Attention, name may be empty if it is not included in the file name (also for OsmAnd default naming).</p>"},{"location":"advanced-metadata-extraction/#grouping-activity-files-under-a-common-name-for-example-all-your-commutes","title":"Grouping activity files under a common name, for example all your commutes","text":"<p>Path:</p> <pre><code>Activities/\n\u251c\u2500 Ride/\n\u2502  \u251c\u2500 Trekking Bike/\n\u2502  \u2502  \u251c\u2500 Commute/\n\u2502  \u2502  \u2502  \u251c\u2500 2024-03-04-07-06-12.gpx\n\u2502  \u2502  \u2502  \u251c\u2500 2024-03-04-15-42-32.gpx\n</code></pre> <pre><code>(?P&lt;kind&gt;[^/]+)/(?P&lt;equipment&gt;[^/]+)/(?P&lt;name&gt;[^/]+)/\n</code></pre> <ul> <li>kind: <code>Ride</code></li> <li>equipment: <code>Trekking Bike</code></li> <li>name: <code>Commute</code> (for all activities in Commute directory )</li> </ul>"},{"location":"advanced-metadata-extraction/#activities-without-equipment","title":"Activities without equipment","text":"<p>Path:</p> <pre><code>Activities/\n\u251c\u2500 Run/\n\u2502  \u251c\u2500 2024-03-09-09-24-03 To the lake.gpx\n\u2502  \u251c\u2500 2024-03-10-09-44-37 To the top of the hill.gpx\n</code></pre> <pre><code>(?P&lt;kind&gt;[^/]+)/[-\\d_ ]+(?P&lt;name&gt;[^/]+)(?:\\.\\w+)+$\n</code></pre> <ul> <li>kind: <code>Run</code></li> <li>equipment: <code>Unknown</code></li> <li>names: <code>To the lake</code> ; <code>To the top of the hill</code></li> </ul>"},{"location":"advanced-metadata-extraction/#next-steps","title":"Next Steps","text":"<p>If you you manually rename, move or delete your activity files, the program needs to reload to respect these changes. You can restart the program or visit <code>Scan New Activities</code> in the admin menu of the WebUI.</p>"},{"location":"build-custom-plots/","title":"Build Custom Plots","text":"<p>Activity data can be visualized in lots of ways. Every user want to have slightly different visualizations. Hence since version 0.40.0 you can define your own plots using the interactive plot builder.</p> <p>Using the JSON codes one can share plots with other users. You can import them in the plot builder. Go to \u201cAdmin\u201d \u2192 \u201cPlot Builder\u201d and click on \u201cImport\u201d. Paste the code snippet and it will import the plot specification and generate the same from your data.</p>"},{"location":"build-custom-plots/#example-gallery","title":"Example gallery","text":"<p>To get you started, here is some inspiration with plots that are possible.</p> <p>This one shows the total distance per year as a bar chart, colored by activity kind:</p> <p></p> <pre><code>{\"name\": \"Yearly Distance per Kind\", \"mark\": \"bar\", \"x\": \"year(start):O\", \"y\": \"sum(distance_km)\", \"color\": \"kind\"}\n</code></pre> <p>This one shows the weekly distances as the size of circles. There you can see the usage of ISO year and ISO week.</p> <p></p> <pre><code>{\"name\": \"Distance per Week\", \"mark\": \"circle\", \"x\": \"week:O\", \"y\": \"iso_year:O\", \"size\": \"sum(distance_km)\"}\n</code></pre> <p>Here we have the distances aggregated per week and colored by kind. This plot is grouped by year, so you get some tabs above it and one plot per year:</p> <p></p> <p></p> <pre><code>{\"name\": \"Weekly Distance per Kind\", \"mark\": \"bar\", \"x\": \"week:O\", \"y\": \"sum(distance_km)\", \"color\": \"kind\", \"group_by\": \"iso_year\"}\n</code></pre> <p>You can also create heatmaps, here is the daily distance shown as a calendar spanned by month and day-of-month. One plot per year, here showing one of them.</p> <p></p> <pre><code>{\"name\": \"Daily Distance Heatmap\", \"mark\": \"rect\", \"x\": \"date(start)\", \"y\": \"month(start)\", \"color\": \"sum(distance_km)\", \"group_by\": \"year\"}\n</code></pre> <p>Want to spot a pattern in your week? Which days are you most active in? Create a heatmap with the weeks and weekdays separated and you can see which days are with the most distance:</p> <p></p> <pre><code>{\"name\": \"Daily distance per weekday\", \"mark\": \"rect\", \"x\": \"week:O\", \"y\": \"iso_day:O\", \"color\": \"sum(distance_km)\", \"group_by\": \"iso_year\"}\n</code></pre> <p>We don't need to use time as one axis. We can also plot the distance versus the elapsed time and visualize activity kind as color. One can see the different typical lengths of activities and their distances. Bike rides (green) clearly stand aside from walks and hikes (yellow and purple). But train and car rides (orange and blue) have a different slope again.</p> <p></p> <pre><code>{\"name\": \"My New Plot\", \"mark\": \"circle\", \"x\": \"hours\", \"y\": \"distance_km\", \"color\": \"kind\"}\n</code></pre>"},{"location":"change-database-schema/","title":"Change Database Schema","text":"<p>If you are a developer and want to add a feature that needs changes to the database schema, this how-to guide will show you the steps to do it.</p> <p>Whenever you have planned such changes, please be sure to get into contact early as changes to the data model impact the core of the application and hence need a bit of planning. Also the database schema can only be changed in a linear history, hence there cannot be two pull requests with pending migrations present.</p>"},{"location":"change-database-schema/#orm-and-migrations","title":"ORM and Migrations","text":"<p>Since version 0.39.0, this project uses SQL Alchemy as a database framework. This abstracts away the concrete database such that one could use various backends. At the moment we just SQLite as a default because it is stored in a local file and doesn't need any particular setup. SQL Alchemy provides an object relational mapper such that we can write Python code and it will take care of all the database interactions. There are certain drawbacks with regard to performance and flexibility, but these don't concern us in this project.</p> <p>Whenever there is a change to the model, existing databases have to be upgraded accordingly. As users could potentially have any previous state of the database, it gets a bit messy. Fortunately Alembic takes care of these migrations.</p>"},{"location":"change-database-schema/#concrete-example","title":"Concrete example","text":"<p>Somebody wanted to be able to change the colors for the tags. We need to add a color field to the database table of the tags. In the file <code>geo_activity_playground/core/datamodel.py</code> we find the following model for the tags:</p> <pre><code>class Tag(DB.Model):\n    __tablename__ = \"tags\"\n    __table_args__ = (sa.UniqueConstraint(\"tag\", name=\"tags_tag\"),)\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    tag: Mapped[str] = mapped_column(String, unique=True)\n\n    activities: Mapped[list[Activity]] = relationship(\n        secondary=activity_tag_association_table, back_populates=\"tags\"\n    )\n</code></pre> <p>This maps to the database table <code>tags</code> and has a column <code>id</code> as primary key and a column <code>tag</code> with the name of tag. We want to add a color field as a string. We can just add that field to this class <code>Tag</code>:</p> <pre><code>class Tag(DB.Model):\n    __tablename__ = \"tags\"\n    __table_args__ = (sa.UniqueConstraint(\"tag\", name=\"tags_tag\"),)\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    tag: Mapped[str] = mapped_column(String, unique=True)\n    color: Mapped[str] = mapped_column(String, nullable=True)\n\n    activities: Mapped[list[Activity]] = relationship(\n        secondary=activity_tag_association_table, back_populates=\"tags\"\n    )\n</code></pre> <p>This changes the model, but it doesn't upgrade the database. We need to run the following:</p> <pre><code>poetry run alembic revision --autogenerate -m 'Add Tag.color'\n</code></pre> <p>This then created the file <code>geo_activity_playground/alembic/versions/0f02b92c4f94_add_tag_color.py</code>. This contains a bit of metadata:</p> <pre><code>revision: str = \"0f02b92c4f94\"\ndown_revision: Union[str, None] = \"da2cba03b71d\"\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n</code></pre> <p>We can see that it has its own revision has and depends on a previous version. This way the system can figure out which migration builds on which ones.</p> <p>Then it contains an <code>upgrade</code> method, which adds the new column to the table:</p> <pre><code>def upgrade() -&gt; None:\n    with op.batch_alter_table(\"tags\", schema=None) as batch_op:\n        batch_op.add_column(sa.Column(\"color\", sa.String(), nullable=True))\n</code></pre> <p>And as a nice benefit, we also get a <code>downgrade</code> method which can let the user go back if they would want to do that:</p> <pre><code>def downgrade() -&gt; None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table(\"tags\", schema=None) as batch_op:\n        batch_op.drop_column(\"color\")\n</code></pre> <p>All you need to do is to add this new file to the git repository and it will become part of the program. When the program is started on any database, it will first check whether that database needs to be migrated and apply the relevant migrations in the right order.</p>"},{"location":"change-database-schema/#verifying-the-database-status","title":"Verifying the database status","text":"<p>The current state of the database is stored in the database itself in a table called <code>alembic_version</code>. We can query that table and see the version:</p> <pre><code>\u276f sqlite3 database.sqlite \nsqlite&gt; SELECT * FROM alembic_version;\n0f02b92c4f94\n</code></pre> <p>So here the migration was already applied at the time of writing.</p>"},{"location":"change-database-schema/#summary","title":"Summary","text":"<p>If you want to change the data model, do the following:</p> <ol> <li>Get in touch, let's discuss your plans.</li> <li>Add the necessary fields in <code>geo_activity_playground/core/datamodel.py</code> or potentially other files if your model has more cohesion with your code.</li> <li>Run <code>poetry run alembic revision --autogenerate -m 'MESSAGE'</code> with an appropriate message.</li> <li>Add your changes and the generated migration file to git.</li> </ol>"},{"location":"changelog/","title":"Changelog","text":"<p>This is a log of all changes made to the project. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#version-192-2025-08-11","title":"Version 1.9.2 \u2014 2025-08-11","text":"<p>Fixed:</p> <ul> <li>Also filter out zero speed values, which can only come from errors. (GH-333)</li> <li>Cope with GPX files that have points but none with latitude/longitude information. (GH-334)</li> </ul>"},{"location":"changelog/#version-191-2025-08-05","title":"Version 1.9.1 \u2014 2025-08-05","text":"<p>Fixed:</p> <ul> <li>Compute Eddington number using local time zone. (GH-336)</li> <li>Show local time in search table.</li> <li>Use local time for statistics and plots. (GH-323)</li> <li>Accept negative latitude or longitude, fixes explorer tile pop-up for southern and western hemispheres. (GH-335)</li> </ul>"},{"location":"changelog/#version-190-2025-07-21","title":"Version 1.9.0 \u2014 2025-07-21","text":"<p>Added:</p> <ul> <li>Add a bit more logging for Strava API import. (GH-329)</li> <li>Extract heart rate and cadence from Garmin GPX files. (GH-327)</li> <li>Allow to upload multiple activities at the same time. (GH-332)</li> </ul> <p>Fixed:</p> <ul> <li>Add another time zone localization. (GH-331)</li> <li>Remove speed spikes that stem from data points with the same time stamp. (GH-328), (GH-333)</li> </ul>"},{"location":"changelog/#version-183-2025-07-15","title":"Version 1.8.3 \u2014 2025-07-15","text":"<p>Fixed:</p> <ul> <li>Use database to see whether Strava activities were already imported. (GH-321)</li> </ul>"},{"location":"changelog/#version-182-2025-07-15","title":"Version 1.8.2 \u2014 2025-07-15","text":"<p>Fixed:</p> <ul> <li>Rename <code>Activity.start_local</code> to <code>Activity.start_utc</code> like it should have been named from the beginning. (GH-325)</li> </ul>"},{"location":"changelog/#version-181-2025-07-15","title":"Version 1.8.1 \u2014 2025-07-15","text":"<p>Fixed:</p> <ul> <li>Check whether <code>first_visit</code> and <code>last_visit</code> are <code>None</code> before checking the time zone. (GH-309)</li> </ul>"},{"location":"changelog/#version-180-2025-07-13","title":"Version 1.8.0 \u2014 2025-07-13","text":"<p>This release should have been a patch release (1.7.2), unfortunately I realized this too late. Removing or yanking a release causes more trouble than it is worth.</p> <p>Changed:</p> <ul> <li>Update documentation for Strava to include the <code>--strava-begin</code> and <code>--strava-end</code> command line options. (GH-296)</li> </ul> <p>Fixed:</p> <ul> <li>Convert tile visit times to UTC if needed. (GH-309)</li> </ul>"},{"location":"changelog/#version-171-2025-07-13","title":"Version 1.7.1 \u2014 2025-07-13","text":"<p>Fixed:</p> <ul> <li>Before importing activities via the Strava API, make sure that they don't already exist. (GH-296)</li> </ul>"},{"location":"changelog/#version-170-2025-07-13","title":"Version 1.7.0 \u2014 2025-07-13","text":"<p>Added:</p> <ul> <li>Add <code>--strava-begin</code> and <code>--strava-end</code> command line options. (GH-296)</li> <li>Add more debug output for timezone handling in tile history. (GH-309)</li> </ul> <p>Changed:</p> <ul> <li>Remove duplicate queries to all activities, should speed up summary statistics, search and hall of fame.</li> </ul> <p>Fixed:</p> <ul> <li>Rotate photos according to their EXIF rotation tag. (GH-322)</li> <li>Use local time zone for statistics. (GH-323)</li> <li>Make tile history consistency check more robust against routes.</li> <li>Attempt to unpack FIT tuples to handle enhanced speed and elevation. (GH-299)</li> <li>Work around bytes in calories field. (GH-307)</li> <li>Make tile visit consistency robust against deleted activities.</li> </ul>"},{"location":"changelog/#version-160-2025-07-13","title":"Version 1.6.0 \u2014 2025-07-13","text":"<p>Added:</p> <ul> <li>Bring back the progress bar for activity import.</li> <li>Print the path of the imported activity in the Strava checkout importer.</li> <li>Add some buttons to the trim feature overlay to make it easier to use. (GH-234)</li> <li>Add Wanderer to the list of related projects.</li> <li>Add documentation about digital elevation models and their problems.</li> </ul> <p>Fixed:</p> <ul> <li>Fix photo date extraction by using <code>strptime</code> again. (GH-304)</li> <li>Replace <code>api.geotimezone.com</code> with the <code>timezonefinder</code> such that finding the time zone from coordinates doesn't need an external service. That service was unavailable due to a TLS certificate expiry and caused disruption. (GH-319)</li> <li>Ensure that time series are localized to UTC before extracting tile visits. (GH-309)</li> <li>If the FIT field <code>enhanced_speed</code> is a tuple, it is just ignored now. (GH-299)</li> </ul>"},{"location":"changelog/#version-152-2025-07-12","title":"Version 1.5.2 \u2014 2025-07-12","text":"<p>Fixed:</p> <ul> <li>Fixed broken explorer tiles when zooming in a lot. That was broken again.</li> </ul>"},{"location":"changelog/#version-151-2025-07-12","title":"Version 1.5.1 \u2014 2025-07-12","text":"<p>Fixed:</p> <ul> <li>Catch <code>TypeError</code> as well as <code>ValueError</code>. (GH-307)</li> </ul>"},{"location":"changelog/#version-150-2025-07-12","title":"Version 1.5.0 \u2014 2025-07-12","text":"<p>Added:</p> <ul> <li>Add explorer tile color strategy for missing tiles.</li> <li>List tile URLs on explorer page. (GH-245)</li> </ul> <p>Changed:</p> <ul> <li>Use 255 instead of 256 as a denominator for colors. Shouldn't make any noticeable difference, though.</li> </ul> <p>Fixed:</p> <ul> <li>Use UTC time for photo upload. (GH-304)</li> <li>Catch more exceptions during GPX import. (GH-301)</li> </ul>"},{"location":"changelog/#version-141-2025-07-11","title":"Version 1.4.1 \u2014 2025-07-11","text":"<p>Fixed:</p> <ul> <li>Fixed broken explorer tiles when zooming in a lot.</li> </ul>"},{"location":"changelog/#version-140-2025-07-11","title":"Version 1.4.0 \u2014 2025-07-11","text":"<p>Added:</p> <ul> <li>Show Python version in the footer.</li> <li>Add message about importer thread being done.</li> <li>Add <code>inspect-photo</code> entrypoint for debugging.</li> <li>Add some debug output when <code>idxmax</code> cannot be taken. (GH-307)</li> </ul> <p>Changed:</p> <ul> <li>Explorer tiles are rendered as overlay, this makes the tiles use as overlays elsewhere. (GH-245)</li> <li>Heatmap is rendered as overlay, can be used externally as well.</li> </ul> <p>Fixed:</p> <ul> <li>Fix enabling new zoom level for explorer.</li> <li>Recompute cluster and square evolution if chronological order gets broken. (GH-313)</li> <li>Ignore activities with errors in the Strava checkout importer. (GH-301)</li> <li>Automatically reset tile history when it doesn't have time zones yet. (GH-309)</li> <li>Take EXIF time zone into account when importing images. (GH-304)</li> <li>Fix \"first visit\" explorer tile color strategy in presence of routes.</li> </ul>"},{"location":"changelog/#version-132-2025-07-11","title":"Version 1.3.2 \u2014 2025-07-11","text":"<p>Added:</p> <ul> <li>Support Python 3.10 again.</li> </ul> <p>Removed:</p> <ul> <li>Disable Copernicus DEM because the dependencies have caused conflicts, restrict to Python \u2265 3.11 and the value proposition is questionable.</li> </ul>"},{"location":"changelog/#version-131-2025-07-10","title":"Version 1.3.1 \u2014 2025-07-10","text":"<p>Added:</p> <ul> <li>Add debug output in case of weird FIT file import issues. (GH-301)</li> </ul> <p>Changed:</p> <ul> <li>Run explorer tile evolution directly when importing such that one can use all features right after importing the first activity.</li> <li>Use URL encode to safely encode the activity names to file paths in the Strava checkout converter. (GH-298)</li> </ul> <p>Fixed:</p> <ul> <li>New activities get a UUID assigned and saved. (GH-310)</li> <li>Fix module import on Strava import. (GH-306)</li> <li>Make date optional in activity show such that routes can be displayed. (GH-311)</li> <li>Pin <code>tifffile</code> version to exactly 2025.5.10. (GH-308)</li> <li>Skip files without suffixes such that stray files don't halt the process. (GH-301)</li> </ul>"},{"location":"changelog/#version-130-2025-07-07","title":"Version 1.3.0 \u2014 2025-07-07","text":"<p>Added:</p> <ul> <li>Obtain elevation data from Copernicus Digital Elevation Model (DEM). This will be used as a fall-back in case there is no recorded data. The DEM model files are downloaded anonymously from Amazon AWS in tiles of 1\u00b0 latitude/longitude (covering an area with roughly 100 km side length). Unfortunately the data has its own accuracy problem, hence it is not used instead of measured data yet.</li> <li>Query external API for time zone at given coordinates such that times can be shown in the local time zone of the activity. (GH-303)</li> <li>Added a time zone fixer tool which allows to reinterpret the times of already imported activities. (GH-158)</li> </ul> <p>Changed:</p> <ul> <li>Move importing into separate thread to speed-up startup. Importing then runs in the background.</li> <li>Import new activities with less steps, get rid of intermediate parsed representations.</li> <li>After every imported activity, run the whole processing. This means that one can directly use heatmap and cluster while more activities are importing. (GH-300)</li> <li>Store times as UTC again. They are displayed in the local time zone of the activity in most places. In plots they are shown in the browser time zone for the time being. The search table has them in UTC.</li> <li>Store activity time series with a UUID filename. This makes importing activities robust against crashes or shutdowns of the webserver.</li> </ul> <p>Fixed:</p> <ul> <li>During a development version, there was an issue with the Strava API. That's fixed. (GH-305)</li> </ul> <p>Removed:</p> <ul> <li>\u26a0\ufe0f Support for Python 3.10 is now dropped, you need at least Python 3.11.</li> </ul>"},{"location":"changelog/#version-120-2025-06-20","title":"Version 1.2.0 \u2014 2025-06-20","text":"<p>Added:</p> <ul> <li>Support to upload multiple photos at once. (GH-293)</li> <li>Add config UI to change map tile source. (GH-194)</li> </ul> <p>Changed:</p> <ul> <li>Use consistent emoji string to describe activities on landing page and hall of fame.</li> </ul> <p>Fixed:</p> <ul> <li>Fix error when search results are empty.</li> <li>Fix calls to <code>vega_direct</code> on equipment page.</li> <li>Fix rounding issue on hall of fame. (GH-292)</li> </ul>"},{"location":"changelog/#version-110-2025-06-17","title":"Version 1.1.0 \u2014 2025-06-17","text":"<p>Added:</p> <ul> <li>The plot builder now supports grouping on top of the previous features.</li> <li>Add an edit button to custom plots on the summary statistics page.</li> <li>Bring back the colorful cluster coloring mode and make that the default.</li> <li>Expose default cluster coloring mode via <code>config.json</code> option <code>cluster_color_strategy</code>, web UI settings menu might follow later.</li> </ul> <p>Changed:</p> <ul> <li>The plots on the summary page have been re-done. They are now all available not only for distance and elevation gain, but also for elapsed and moving time, energy (calories) and steps.</li> <li>Move \"Hall of Fame\" into separate page.</li> <li>The files in <code>/static</code> are organized a little better, no change for the user.</li> <li>Use tabs on the entry page to organize plots for distance and elevation gain.</li> <li>Add breadcrumbs to plot builder edit page.</li> </ul> <p>Fixed:</p> <ul> <li>Fix summary page when routes are present. (GH-282)</li> <li>Fix opacity in parametric plots.</li> <li>Fix download of explored or missing tiles from the explorer tile view.</li> </ul>"},{"location":"changelog/#version-100-2025-06-14","title":"Version 1.0.0 \u2014 2025-06-14","text":"<p>Added:</p> <ul> <li>Add export feature for activities and metadata. (GH-246)</li> <li>Add tooltip to server-side explorer tiles. (GH-243)</li> <li>Add developer documentation about Alembic migrations.</li> <li>Write a bit more about the acknowledgments.</li> </ul> <p>Changed:</p> <ul> <li>Make \u201cfast explorer tile mode\u201d much prettier, mark cluster and square.</li> <li>Update quad tree picture with a less intrusive watermark.</li> </ul> <p>Removed:</p> <ul> <li>Old explorer mode with client-side rendering is now deprecated as the server-side mode has the same features.  (GH-243)</li> </ul> <p>Fixed:</p> <ul> <li>Uploading an activity with a filename that already exists gives an error message. Before it would overwrite the source activity file but not scan it again. (GH-289)</li> <li>Fix search in cases that only routes (and no tracks) could be found.</li> <li>Fix \u201cdate before\u201d filter. This was broken due to a mixed-up comparison and effectively acted as a second \u201cdate after\u201d filter. (GH-290)</li> <li>Add a proper redirect on login such that one directly gets back to the page that one wanted to access.</li> </ul>"},{"location":"changelog/#version-0450-2025-06-08","title":"Version 0.45.0 \u2014 2025-06-08","text":"<p>Added:</p> <ul> <li>Add config option <code>reliable_elevation_measurements</code> (defaulting to true) that allows hiding the elevation gain data if the user knows that their measurement of elevation data is unreliable.</li> </ul> <p>Fixed:</p> <ul> <li>Saving privacy zones now works again. (GH-287)</li> <li>Fix redirect after uploading a new activity. (GH-286)</li> <li>Fix filter application to heatmap. (GH-285)</li> <li>Attempt to fix equipment and summary page when activities without date are present. (GH-282)</li> <li>Set unknown equipment in Strava Checkout import to \u201cUnknown\u201d. (GH-275)</li> <li>Fix Eddington number computation. (GH-279)</li> </ul>"},{"location":"changelog/#version-0440-2025-05-24","title":"Version 0.44.0 \u2014 2025-05-24","text":"<p>Added:</p> <ul> <li>Add delete button for activities (with an \u201cAre you sure?\u201d confirmation). (GH-278)</li> <li>Add user defined colors for activity tags. (GH-276)</li> <li>Add download of original file (after login). (GH-271)</li> </ul> <p>Fixed:</p> <ul> <li>Fix change of track segmentation threshold. (GH-273)</li> </ul>"},{"location":"changelog/#version-0433-2025-05-15","title":"Version 0.43.3 \u2014 2025-05-15","text":"<p>Fixed:</p> <ul> <li>Fix adding of new equipment. (GH-272)</li> <li>Fix adding of new activity kind. (GH-270)</li> <li>Gracefully handle case when no activity kinds are considered for achievements but no prior tiles have been extracted. (GH-274)</li> </ul>"},{"location":"changelog/#version-0432-2025-05-06","title":"Version 0.43.2 \u2014 2025-05-06","text":"<p>Fixed:</p> <ul> <li>Allow POST request to <code>/settings/admin-password</code>. (GH-269)</li> </ul>"},{"location":"changelog/#version-0431-2025-05-06","title":"Version 0.43.1 \u2014 2025-05-06","text":"<p>Fixed:</p> <ul> <li>Handle NaT (not a time) values gracefully. (GH-268)</li> <li>Make entry page robust against routes without a start.</li> <li>Make search page robust against routes without time information.</li> <li>Make activity page robust against missing tiles. (GH-261)</li> <li>Make activity page robust against routes. (GH-266)</li> <li>Enforce that at least one activity kind is considered for achievements. (GH-261)</li> </ul>"},{"location":"changelog/#version-0430-2025-04-27","title":"Version 0.43.0 \u2014 2025-04-27","text":"<p>Added:</p> <ul> <li>Add photo upload that matches photos automatically to activities. Photos are shown on the activity page and also on the map for each activity. There is a global map with all photos. (GH-247)</li> <li>Add tag filter to search form. (GH-242)</li> <li>Mention CubeTrek on page with similar projects.</li> </ul> <p>Changed:</p> <ul> <li>The search queries work directly against the database.</li> <li>Remove some redundant metadata from the activity overview.</li> </ul> <p>Fixed:</p> <ul> <li>Filter not-a-time dates when importing into the database. (GH-266)</li> </ul> <p>Removed:</p> <ul> <li>Search history is broken for now.</li> </ul>"},{"location":"changelog/#version-0420-2025-04-26","title":"Version 0.42.0 \u2014 2025-04-26","text":"<p>Added:</p> <ul> <li>Add page to documentation about similar projects.</li> <li>Add more detailed error message when activity import failed. (GH-266)</li> <li>Allow setting tags for activities. There is a separate tag manager in the settings panel. Search is still missing. (GH-242)</li> <li>Add search filter for activity distance. (GH-267)</li> </ul> <p>Fixed:</p> <ul> <li>Iterate over activities in temporal order. This could have lead to screwed up explorer tile history. Delete <code>Cache/tile-state-2.pickle</code> and <code>Cache/work-tracker-tile-state.pickle</code> to regenerate that part as needed.</li> <li>Try to be more robust with NaN values when importing activities. (GH-266)</li> <li>Fix database directory when using a relative basedir. (GH-256)</li> </ul> <p>Removed:</p> <ul> <li>Remove dict based access to <code>Activity</code> class.</li> </ul>"},{"location":"changelog/#version-0410-2025-04-20","title":"Version 0.41.0 \u2014 2025-04-20","text":"<p>Added:</p> <ul> <li>Add \"elevation Eddington number\" page, which shows an Eddington number but with elevation instead of distance. (GH-254)</li> <li>In the activity view, there is a map with a colored track line. The coloring was based only on speed, now it can also show elevation. (GH-254)</li> <li>On the landing page there is a plot with the elevation gain in the past weeks. (GH-254)</li> <li>Add a fast server-side rendering mode for explorer tiles. This is much faster with arbitrary many explored tiles, it just doesn't show nice metadata yet. This can also be used as a tile source for external planning tools. (GH-243)</li> <li>Add data model for tags, though no user interface yet.</li> </ul> <p>Changed:</p> <ul> <li>Use database to populate entry page.</li> <li>Make explorer tile page load much faster.</li> </ul> <p>Fixed:</p> <ul> <li>Fix startup without activities. (GH-263)</li> </ul>"},{"location":"changelog/#version-0401-2025-04-18","title":"Version 0.40.1 \u2014 2025-04-18","text":"<p>Fixed:</p> <ul> <li>Fix moving time for activities with zero elapsed time or moving time. (GH-260)</li> <li>Handle <code>/</code> in activity name when converting from Strava. (GH-259)</li> </ul> <p>Removed:</p> <ul> <li>Remove \u201ccommute\u201d concept from Strava converter. (GH-259)</li> </ul>"},{"location":"changelog/#version-0400-2025-04-18","title":"Version 0.40.0 \u2014 2025-04-18","text":"<p>Added:</p> <ul> <li>Add a plot builder. (GH-258)</li> </ul> <p>Changed:</p> <ul> <li>Rename \u201caltitude\u201d to \u201celevation\u201d. Altitude describes the height between ground and something in the sky, elevation describes the hight of a point of earth with respect to sea level. Hence for our outdoor activities, \u201celevation\u201d is more fitting. (GH-253)</li> </ul> <p>Fixed:</p> <ul> <li>Use <code>pathlib</code> to construct database path correctly on Windows. (GH-256)</li> <li>Try to support German localization in Strava conversion. (GH-259)</li> <li>Fix moving time for activities without duration. (GH-260)</li> </ul>"},{"location":"changelog/#version-0391-2025-04-17","title":"Version 0.39.1 \u2014 2025-04-17","text":"<p>Fixed:</p> <ul> <li>Fix import of activities into database. (GH-257)</li> </ul>"},{"location":"changelog/#version-0390-2025-04-15","title":"Version 0.39.0 \u2014 2025-04-15","text":"<p>Added:</p> <ul> <li>Add trim feature for activities, although the user interface is quite basic at the moment. (GH-234)</li> <li>Add a plot for monthly equipment usage. (GH-251)</li> <li>Add bubble chart with activities. (GH-252)</li> <li>Add installation instructions for macOS. (GH-235)</li> <li>Add link to changelog from the version string. (GH-244)</li> <li>Add documentation for noisy elevation gain.</li> <li>README file now contains much more content. (GH-250)</li> <li>Add bookmark function for the square planner. (GH-210)</li> </ul> <p>Changed:</p> <ul> <li>\u26a0\ufe0f The program now stores actual state in the directory and not merely caches the parsed data. This means that one can make changes to the data within the web interface and that will be stored in the database and not in the original files. This is a change in scope of the program so far, which has been only a mere viewer. Data is now stored in a database (SQLite) instead of a Parquet file. Deleting the <code>Cache</code> directory will not result in data loss, but deleting <code>database.sqlite</code> will.</li> <li>Make all tables responsive. (GH-233)</li> <li>Suggest to upgrade with <code>--pip-args \"--upgrade-strategy eager\"</code> to get the latest versions of dependencies as well.</li> <li>Display activities from the past 30 days on the landing page, grouped by day.</li> <li>Only show relevant data on the activity page.</li> <li>The split between controllers and blueprints is removed, making the code less complex at the cost of not separating code from the web framework. (GH-214)</li> <li>Settings pages for equipment offsets and activity kinds to consider for achievements have been converted into management pages for equipments and activity kinds.</li> </ul> <p>Removed:</p> <ul> <li>Deleting an activity file from the <code>Activities</code> directory will not remove them from the database any more.</li> <li>Remove \u201ccommute\u201d property as it is unclear what that even means and what to do with that.</li> <li>Remove current activity kind renaming functionality. Will be replaced by something acting on the database later.</li> </ul> <p>Fixed:</p> <ul> <li>Make arrows in square planner look consistent on Windows. (GH-237)</li> </ul>"},{"location":"changelog/#version-0382-2025-03-29","title":"Version 0.38.2 \u2014 2025-03-29","text":"<p>Added:</p> <ul> <li>Add tooltips to all charts and add a sensible amount of decimal places. (GH-231)</li> </ul> <p>Changed:</p> <ul> <li>\u26a0\ufe0f <code>master</code> is renamed to <code>main</code>.</li> <li>Format changelog according to Keep a Changelog.</li> <li>Restructure the documentation such that it hopefully is more inviting for new users.</li> <li>Share picture now scales with viewport. (GH-232)</li> <li>Activity details and map go below each other on small viewports. (GH-232)</li> </ul> <p>Removed:</p> <ul> <li>Remove documentation of individual features as it is hard to maintain and doesn't seem to bring much value. With the web interface it is better to invest into usability or inline explanation instead.</li> </ul>"},{"location":"changelog/#version-0381-2025-03-16","title":"Version 0.38.1 \u2014 2025-03-16","text":"<p>Fixed:</p> <ul> <li>Do not fail if elevation gain is missing. (GH-227)</li> <li>Update pyarrow dependency from 18 to 19 to help with dependency issues.</li> </ul>"},{"location":"changelog/#version-0380-2025-01-26","title":"Version 0.38.0 \u2014 2025-01-26","text":"<p>Added:</p> <ul> <li>Show history of recent filters.</li> <li>Allow saving filters as favorites.</li> <li>Add average speed to various views. (GH-192)</li> <li>Add elevation gain extraction. Be aware that this is very noisy for most GPS devices as they lack a barometer. (GH-199)</li> <li>\"Hall of Fame\" includes additional nominations per equipment used.</li> <li>Add Eddington number with activities from just single years. (GH-195)</li> <li>Add time evolution of Eddington number. (GH-195)</li> <li>Add Eddington number but grouped by weeks instead of days. (GH-195)</li> </ul> <p>Fixed:</p> <ul> <li>Sort activities by date descending in the search view. (GH-225)</li> <li>Replace empty strings in kind and equipment with literal \"Unknown\". (GH-224)</li> <li>Remove duplicate legend for day overview. (GH-223)</li> <li>Add authentication to enablement of additional zoom levels. (GH-222)</li> <li>Sort equipment details by last use.</li> <li>Make Eddington plots only zoomable in one axis.</li> <li>Add uniform kind scale to equipment usage plots.</li> </ul>"},{"location":"changelog/#version-0370-2025-01-18","title":"Version 0.37.0 \u2014 2025-01-18","text":"<p>Added:</p> <ul> <li>Add unified activity filter for activity overview, heatmap, Eddington number, summary statistics. (GH-215)</li> </ul> <p>Fixed:</p> <ul> <li>Fix Docker build with Poetry 2.0. (GH-218)</li> <li>Fix equipment summary when routes are present. (GH-219)</li> </ul>"},{"location":"changelog/#version-0362-2025-01-10","title":"Version 0.36.2 \u2014 2025-01-10","text":"<p>Fixed:</p> <ul> <li>Try to fix search view for routes without time information. (GH-217)</li> </ul>"},{"location":"changelog/#version-0361-2025-01-06","title":"Version 0.36.1 \u2014 2025-01-06","text":"<p>Fixed:</p> <ul> <li>Remove integrity from assets. (GH-216)</li> </ul>"},{"location":"changelog/#version-0360-2025-01-04","title":"Version 0.36.0 \u2014 2025-01-04","text":"<p>Added:</p> <ul> <li>Add date filter to heatmap. (GH-212)</li> <li>Add square planner to navigation. (GH-209)</li> </ul> <p>Changed:</p> <ul> <li>Clip speed coloring with IQR to remove outliers. (GH-211)</li> <li>Remove multiprocessing for parsing activities due to warnings about multithreading. This unfortunately slows down initial processing. (GH-206)</li> <li>Start to simplify the controller structure. (GH-214)</li> <li>Encode kinds via integers in heatmap to protect it against weird kind names containing control symbols. (GH-213)</li> </ul>"},{"location":"changelog/#version-0351-2025-01-03","title":"Version 0.35.1 \u2014 2025-01-03","text":"<p>Changed:</p> <ul> <li>Do some internal changes to the map background generation for share pictures.</li> <li>Do some refactoring in the web code.</li> </ul> <p>Fixed:</p> <ul> <li>Support activity files with uppercase suffix. (GH-208)</li> </ul>"},{"location":"changelog/#version-0350-2025-01-01","title":"Version 0.35.0 \u2014 2025-01-01","text":"<p>Added:</p> <ul> <li>Add button to explorer tile map to remove map background.</li> </ul>"},{"location":"changelog/#version-0342-2024-12-31","title":"Version 0.34.2 \u2014 2024-12-31","text":"<p>Changed:</p> <ul> <li>Host another JavaScript asset locally.</li> </ul>"},{"location":"changelog/#version-0341-2024-12-30","title":"Version 0.34.1 \u2014 2024-12-30","text":"<p>Changed:</p> <ul> <li>Host all assets locally to avoid using CDNs.</li> </ul>"},{"location":"changelog/#version-0340-2024-12-21","title":"Version 0.34.0 \u2014 2024-12-21","text":"<p>Added:</p> <ul> <li>Add a share picture per day. (GH-157)</li> </ul> <p>Fixed:</p> <ul> <li>Enforce UTF-8 encoding when reading the <code>activities.csv</code> from the Strava export. (GH-197)</li> <li>Make CSV header parsing a bit more robust. (GH-197)</li> <li>Correct label for equipment \"kinds\" plot. (GH-201)</li> <li>Fix documentation, remove <code>--skip-strava</code> and replace it with <code>--skip-reload</code>. (GH-203)</li> <li>Fix mismatch between ISO week and regular year. (GH-205)</li> </ul>"},{"location":"changelog/#version-0334-2024-12-07","title":"Version 0.33.4 \u2014 2024-12-07","text":"<p>Added:</p> <ul> <li>Add compatibility for Python 3.13.</li> </ul>"},{"location":"changelog/#version-0333-2024-11-24","title":"Version 0.33.3 \u2014 2024-11-24","text":"<p>Fixed:</p> <ul> <li>Fix startup without any activities. (GH-200)</li> <li>Fix upload when there is no <code>Activities</code> directory.</li> </ul>"},{"location":"changelog/#version-0332-2024-11-17","title":"Version 0.33.2 \u2014 2024-11-17","text":"<p>Fixed:</p> <ul> <li>Fix explorer map. The problem was that VS Code auto-formatted the embedded JavaScript and created syntax errors. (GH-198)</li> </ul>"},{"location":"changelog/#version-0331-2024-11-16","title":"Version 0.33.1 \u2014 2024-11-16","text":"<p>Fixed:</p> <ul> <li>Fix little bug with <code>_meta</code>. (GH-156)</li> </ul>"},{"location":"changelog/#version-0330-2024-11-14","title":"Version 0.33.0 \u2014 2024-11-14","text":"<p>Added:</p> <ul> <li>Make heatmap colormap configurable via web UI.</li> <li>Make tile map URL configurable via configuration file. (GH-196)</li> </ul> <p>Changed:</p> <ul> <li>Make daily pulse plot per year in tabs.</li> </ul>"},{"location":"changelog/#version-0320-2024-11-12","title":"Version 0.32.0 \u2014 2024-11-12","text":"<p>Added:</p> <ul> <li>Add config option <code>ignore_suffixes</code> which can be set to something like <code>[\".kml\"]</code> to ignore certain file types. (GH-173)</li> </ul> <p>Changed:</p> <ul> <li>Include all activities in the summary, even those which are not to be considered for achievements.</li> <li>Make share picture always the same size independent of the content.</li> </ul> <p>Removed:</p> <ul> <li>Remove debug print.</li> </ul>"},{"location":"changelog/#version-0310-2024-11-01","title":"Version 0.31.0 \u2014 2024-11-01","text":"<p>Added:</p> <ul> <li>Add metadata editing functionality with override files. (GH-156)</li> </ul> <p>Changed:</p> <ul> <li>Make date and time formats better to read.</li> </ul> <p>Fixed:</p> <ul> <li>Fix heatmap tile cache expiry in cases where the activity kind has changed. (GH-189)</li> </ul>"},{"location":"changelog/#version-0300-2024-10-25","title":"Version 0.30.0 \u2014 2024-10-25","text":"<p>Added:</p> <ul> <li>Add new search functionality that also serves as an overview over all activities. (GH-174)</li> <li>Make track segmentation configurable with a configuration setting. (GH-162)</li> <li>Remove <code>root=</code> prefix in activity kind when importing from Strava. (GH-188)</li> <li>Visualize cadence on the activity page.</li> <li>Add option to rename activity kinds. (GH-188)</li> </ul> <p>Changed:</p> <ul> <li>Update favicon to new logo. (GH-187)</li> <li>Clicking on table headers will sort the tables now. (GH-168)</li> </ul>"},{"location":"changelog/#version-0292-2024-10-14","title":"Version 0.29.2 \u2014 2024-10-14","text":"<p>Added:</p> <ul> <li>Mention Organic Maps. (GH-175)</li> </ul> <p>Changed:</p> <ul> <li>Documentation improvements by beautiful-orca: GH-180, GH-181, GH-182, GH-183, GH-185</li> <li>Use Python 3.12 in Docker. (GH-184)</li> </ul> <p>Fixed:</p> <ul> <li>Fix display of number of new tiles in activity view. (GH-178)</li> <li>Fix distance from new <code>stravalib</code> version. (GH-177)</li> <li>Work around Pandas deprecation message. (GH-179)</li> <li>Do not modify filename on upload any more. (GH-176)</li> </ul>"},{"location":"changelog/#version-0291-2024-10-03","title":"Version 0.29.1 \u2014 2024-10-03","text":"<p>Fixed:</p> <ul> <li>Fix explorer tile export. (GH-167)</li> <li>Fix import of KML files with waypoints. (GH-169)</li> </ul>"},{"location":"changelog/#version-0290-2024-09-30","title":"Version 0.29.0 \u2014 2024-09-30","text":"<p>Added:</p> <ul> <li>Add map with new explorer tiles to activity view. (GH-166)</li> </ul> <p>Changed:</p> <ul> <li>Use dropdown menus to make navigation a bit smaller.</li> <li>Use the same scale for all plots with kind, make this configurable in the settings menu. (GH-155)</li> <li>Rewrite the documentation start page to make it more appealing and reflect the work in the web interface.</li> </ul> <p>Fixed:</p> <ul> <li>Recompute explorer tiles when there are deleted activities. Previously this would lead to <code>KeyError</code> when trying to use the heatmap or the explorer tile maps. (GH-163)</li> <li>Fix explorer tile clusters and square if one has activities that are not to be considered for achievements. (GH-161)</li> <li>Create new function to handle write-and-replace on Windows. (GH-164)</li> <li>Update version of <code>stravalib</code> and with that also <code>pydantic</code>. That fixes a bug with <code>recursive_guard</code>. (GH-160)</li> </ul>"},{"location":"changelog/#version-0280-2024-09-07","title":"Version 0.28.0 \u2014 2024-09-07","text":"<p>Added:</p> <ul> <li>Add settings menu to suppress fields from share pictures.</li> <li>Document the use of Open Street Map uMap for missing explorer tiles on the go.</li> </ul> <p>Changed:</p> <ul> <li>Accelerate the tile visit computation.</li> </ul> <p>Fixed:</p> <ul> <li>Fix spelling mistake in navigation bar.</li> <li>Ignore equipment offsets of equipments that don't exist.</li> <li>Reset corrupt heatmap cache files.</li> </ul> <p>Security:</p> <ul> <li>Improve password mechanism to protect both upload and settings. (GH-159)</li> </ul>"},{"location":"changelog/#version-0271-2024-08-14","title":"Version 0.27.1 \u2014 2024-08-14","text":"<p>Fixed:</p> <ul> <li>Fix <code>num_processes</code> option.</li> </ul>"},{"location":"changelog/#version-0270-2024-08-11","title":"Version 0.27.0 \u2014 2024-08-11","text":"<p>Added:</p> <ul> <li>Add another safeguard against activities that don't have latitude/longitude data. (GH-147)</li> <li>Make multiprocessing optional with <code>num_processes = 1</code> in the configuration. (GH-146)</li> <li>Add settings menu where one can configure various things:</li> <li>Equipment offsets</li> <li>Maximum heart rate for heart rate zones</li> <li>Metadata extractions from paths</li> <li>Privacy zones</li> <li>Strava connection</li> </ul> <p>Changed:</p> <ul> <li>Let the Strava Checkout importer set the file <code>strava-last-activity-date.json</code> which is needed such that the Strava API importer can pick up after all the activities that have been imported via the checkout. (GH-128)</li> <li>Use custom CSV parser to read activities that have newlines in their descriptions. (GH-143)</li> <li>Only pre-compute explorer maps for zoom 14 and 17 by default. Other ones just have to be enabled once. This saves a bit of computing time for most people that don't need to go down to zoom 19. (GH-149)</li> <li>The <code>config.json</code> replaces the <code>config.toml</code> and will automatically be generated.</li> </ul> <p>Fixed:</p> <ul> <li>Do not fail if version cannot be determined. (GH-151)</li> <li>Fix bug in explorer tile interpolation that likely doesn't have an effect in practice.</li> </ul>"},{"location":"changelog/#version-0263-2024-08-08","title":"Version 0.26.3 \u2014 2024-08-08","text":"<p>Fixed:</p> <ul> <li>Require <code>pandas &gt;= 2.2.0</code> to make sure that it knows about <code>include_groups</code>. (GH-142)</li> <li>Ignore activities without time series when using the Strava Checkout import. (GH-144)</li> </ul>"},{"location":"changelog/#version-0262-2024-08-06","title":"Version 0.26.2 \u2014 2024-08-06","text":"<p>Added:</p> <ul> <li>Start with a test suite for the web server that also tests importing.</li> <li>Already fixed a few little bugs with that.</li> </ul> <p>Fixed:</p> <ul> <li>Fix summary page if there are no activities with steps. (GH-141)</li> </ul>"},{"location":"changelog/#version-0261-2024-08-06","title":"Version 0.26.1 \u2014 2024-08-06","text":"<p>Fixed:</p> <ul> <li>More fixes for Strava archive importer. (GH-139, GH-140)</li> </ul>"},{"location":"changelog/#version-0260-2024-08-06","title":"Version 0.26.0 \u2014 2024-08-06","text":"<p>Added:</p> <ul> <li>Add automatic dark mode.</li> <li>Add some more explanation for the Strava connection.</li> </ul> <p>Changed:</p> <ul> <li>Style the settings page a bit.</li> </ul> <p>Fixed:</p> <ul> <li>Fix import from Strava archive that was broken in 0.25.0. (GH-138)</li> </ul>"},{"location":"changelog/#version-0250-2024-08-05","title":"Version 0.25.0 \u2014 2024-08-05","text":"<p>Added:</p> <ul> <li>Add an web interface to connect to Strava API using a shared application such that it becomes much simpler to set up.</li> <li>Compute moving time. (GH-41)</li> <li>Make calories and steps optional for the share picture. (GH-127)</li> </ul> <p>Changed:</p> <ul> <li>Restructure the way that activities are imported to realize a couple of benefits:</li> <li>Deleting activities is detected now, they are removed from the heatmap.</li> <li>If the code is changed, not everything has to be parsed again. This is especially helpful with regard to the rate-limited Strava API.</li> <li>Some code is deduplicated that had accumulated between activity file parsing and the Strava API.</li> <li>Unfortunately it means that everything needs to parsed again into the new format. I'm sorry about that, especially to you Strava users that need to deal with the rate limiting!</li> <li>Update to the column names in the Strava export. (GH-131)</li> </ul> <p>Fixed:</p> <ul> <li>Cope with manually recorded activities in Strava export. (GH-133)</li> <li>Cope with broken FIT files. (GH-134)</li> </ul>"},{"location":"changelog/#version-0242-2024-07-29","title":"Version 0.24.2 \u2014 2024-07-29","text":"<p>Fixed:</p> <ul> <li>Make calories and steps optional for the summary statistics. (GH-127)</li> </ul>"},{"location":"changelog/#version-0241-2024-07-27","title":"Version 0.24.1 \u2014 2024-07-27","text":"<p>Fixed:</p> <ul> <li>Add more timezone handling for Strava API. (GH-124)</li> <li>Fix building of Docker container. (GH-125)</li> <li>Fix heatmap download. (GH-126)</li> </ul>"},{"location":"changelog/#version-0240-2024-07-26","title":"Version 0.24.0 \u2014 2024-07-26","text":"<p>Added:</p> <ul> <li>Added nicer share pictures and privacy zones. (GH-43)</li> <li>Display the number of new explorer tiles and squadratinhos per activity. (GH-95)</li> <li>Show total distance and duration in day overview. (GH-114)</li> <li>Add more summary statistics and add a \"hall of fame\" as well. (GH-115)</li> <li>Show table for Eddington number, also update the plot to make it a bit easier to read. Add some more explanatory text. (GH-161)</li> <li>Allow filtering the heatmap by activity kinds.</li> </ul> <p>Changed:</p> <ul> <li>Open footer links in a new tab. (GH-113)</li> <li>Fix links in search results. (GH-118)</li> <li>Fix link to share picture. (GH-121)</li> <li>Convert everything to \"timezone naive\" dates in order to get rid of inconsistencies. (GH-122)</li> <li>Use Flask Blueprints to organize code.</li> </ul> <p>Removed:</p> <ul> <li>Remove half-finished \"locations\" feature from the navigation.</li> <li>Remove duplicate link to landing page from navigation.</li> </ul> <p>Fixed:</p> <ul> <li>Fix startup from empty cache. A cache migration assumed that <code>activities.parquet</code> exists. I've added a check. (GH-123)</li> </ul>"},{"location":"changelog/#version-0230-2024-06-22","title":"Version 0.23.0 \u2014 2024-06-22","text":"<p>Added:</p> <ul> <li>Use Flask \u201cflash\u201d messages.</li> <li>Support routes that don't have time information attached them. That might be useful if you haven't recorded some particular track but still want it to count towards your heatmap and explorer tiles. (GH-110)</li> </ul> <p>Security:</p> <ul> <li>Add password protection for upload. (GH-111)</li> </ul>"},{"location":"changelog/#version-0220-2024-06-16","title":"Version 0.22.0 \u2014 2024-06-16","text":"<p>Added:</p> <ul> <li>Allow uploading files from within the web UI and parse them directly after uploading. (GH-111)</li> </ul> <p>Fixed:</p> <ul> <li>Fix bug that lead to re-parsing of activity files during startup.</li> </ul>"},{"location":"changelog/#version-0212-2024-06-09","title":"Version 0.21.2 \u2014 2024-06-09","text":"<p>Fixed:</p> <ul> <li>Fix crash in search due to missing <code>distance/km</code>.</li> </ul>"},{"location":"changelog/#version-0211-2024-06-09","title":"Version 0.21.1 \u2014 2024-06-09","text":"<p>Added:</p> <ul> <li>Add support for Python 3.12.</li> </ul>"},{"location":"changelog/#version-0210-2024-06-09","title":"Version 0.21.0 \u2014 2024-06-09","text":"<p>Added:</p> <ul> <li>Calories and steps are now extracted from FIT files. (GH-108)</li> <li>Parsing of activity files is now parallelized over all CPU cores and faster than before.</li> </ul> <p>Changed:</p> <ul> <li>\u26a0\ufe0f New way to extract metadata from paths and filenames. This uses regular expressions and is more versatile than the heuristic before. If you have used <code>prefer_metadata_from_file</code> before, see the documentation on activity files for the new way.</li> <li>Ignore similar activities that have vanished. (GH-105)</li> <li>Be more strict when identifying jumps in activities. Take 30 s and 100 m distance as criterion now. (GH-106)</li> <li>Better error message when trying to start up without any activity files. (GH-109)</li> <li>Single day overview is now linked from each activity.</li> <li>The coloring of the speed along the activity line doesn't remove outliers any more.</li> </ul> <p>Fixed:</p> <ul> <li>Remove warning by fixing a Pandas slice assignment. (GH-107)</li> </ul> <p>Removed:</p> <ul> <li>Removed <code>imagehash</code> from the dependencies.</li> </ul>"},{"location":"changelog/#version-0200-2024-03-02","title":"Version 0.20.0 \u2014 2024-03-02","text":"<p>Added:</p> <ul> <li>Import altitude information from GPX files if available. (GH-91)</li> <li>Also accept boolean values in commute column of Strava's <code>activities.csv</code>. (GH-98)</li> </ul> <p>Changed:</p> <ul> <li>Take time jumps into account in activity distance computation and the various plots of the activities. (GH-90)</li> <li>Keep identity of activities based on hash of the file content, not the path. This allows to rename activities and just update their metadata, without having duplicates. (GH-92)</li> <li>Skip Strava export activities that don't have a file. (GH-99)</li> <li>Protect fingerprint computation from bogus values (GH-100)</li> <li>Make dependency on <code>vegafusion[embed]</code> explicit in the dependencies. (GH-102)</li> </ul> <p>Fixed:</p> <ul> <li>Fix failure to import Strava distance stream due to <code>unsupported operand type(s) for /: 'list' and 'int'</code>. (GH-88)</li> <li>Delete old pickle file before moving the new one onto it to get it working on Windows. (GH-103)</li> </ul>"},{"location":"changelog/#version-0191-2024-02-03","title":"Version 0.19.1 \u2014 2024-02-03","text":"<p>Fixed:</p> <ul> <li>Fix broken import of CSV files due to missing argument <code>opener</code>.</li> </ul>"},{"location":"changelog/#version-0190-2024-02-03","title":"Version 0.19.0 \u2014 2024-02-03","text":"<p>Added:</p> <ul> <li>Add more tooltip information in the plot on the landing page.</li> <li>Add <code>prefer_metadata_from_file</code> configuration option. (GH-87)</li> <li>Download calories from Strava via the detailed API. (GH-17)</li> <li>Add option <code>--skip-strava</code> to the <code>serve</code> command in order to start the webserver without reaching out to Strava first. This might be useful if the rate limit has been exceeded.</li> <li>Attempt to also read Strava exports that are localized to German, though untested. (GH-86)</li> <li>Add a square planner. (GH-36)</li> </ul> <p>Changed:</p> <ul> <li>Refactor some paths into a module such that there are not so many redundant definitions around. (GH-89)</li> </ul> <p>Fixed:</p> <ul> <li>Fix confusion about the internal data type for distance. Most of the time it was in meter, but the display was always in kilometer. In order to make it more clear now, the internal data now only contains the field <code>distance_km</code> and everything is represented as kilometer internally now. (GH-88)</li> </ul>"},{"location":"changelog/#version-0180-2024-01-26","title":"Version 0.18.0 \u2014 2024-01-26","text":"<p>Added:</p> <ul> <li>Display activity source path in detail view.</li> <li>Allow to have both Strava API and activity files.</li> <li>In the calender, give the yearly total.</li> </ul> <p>Changed:</p> <ul> <li>Use an existing Strava Export to load activities, retrieve only the remainder from the Strava API.</li> <li>Ignore files which start with a period. This should also avoid Apple Quarantine files. GH-83</li> </ul> <p>Fixed:</p> <ul> <li>Fix internal server error 500 when there are not-a-number entries in the speed. GH-85</li> </ul>"},{"location":"changelog/#version-0175-2024-01-14","title":"Version 0.17.5 \u2014 2024-01-14","text":"<p>Fixed:</p> <ul> <li>Convert FIT sport type enum to strings. GH-84</li> </ul>"},{"location":"changelog/#version-0174-2024-01-14","title":"Version 0.17.4 \u2014 2024-01-14","text":"<p>Changed:</p> <ul> <li>Try to use charset-normalizer to figure out the strange encoding. GH-83</li> </ul>"},{"location":"changelog/#version-0173-2024-01-14","title":"Version 0.17.3 \u2014 2024-01-14","text":"<p>Fixed:</p> <ul> <li>Fix error handler for GPX encoding issues. GH-83</li> </ul>"},{"location":"changelog/#version-0172-2024-01-14","title":"Version 0.17.2 \u2014 2024-01-14","text":"<p>Fixed:</p> <ul> <li>Fix FIT import failure when the sub-sport is none. GH-84</li> </ul>"},{"location":"changelog/#version-0171-2024-01-13","title":"Version 0.17.1 \u2014 2024-01-13","text":"<p>Added:</p> <ul> <li>From FIT files we also extract the grade, temperature and GPS accuracy fields if they are present. There is no analysis for them yet, though. Also extract the workout name, sport and sub-sport fields from FIT files. GH-81</li> <li>Add more logging to diagnose Unicode issue on macOS. GH-83</li> </ul> <p>Changed:</p> <ul> <li>Use locally downloaded tiles for all maps, this way we do not need to download them twice for activities and explorer/heatmap.</li> <li>Localize SimRa files to local time zone. GH-80</li> <li>Parse speed unit from FIT file. There are many devices which record in m/s and not in km/h, yielding too low speeds in the analysis. This is now fixed. GH-82</li> <li>Skip <code>.DS_Store</code> files in the activity directory. GH-81</li> </ul>"},{"location":"changelog/#version-0170-2024-01-03","title":"Version 0.17.0 \u2014 2024-01-03","text":"<p>Added:</p> <ul> <li>Add <code>Dockerfile</code> such that one can easily use this with Docker. GH-78</li> <li>Add support for the CSV files of the SimRa Project. GH-79</li> </ul> <p>Fixed:</p> <ul> <li>Fix bug which broke the import of <code>.tcx.gz</code> files.</li> </ul>"},{"location":"changelog/#version-0164-2023-12-23","title":"Version 0.16.4 \u2014 2023-12-23","text":"<p>Fixed:</p> <ul> <li>Fix syntax error.</li> </ul>"},{"location":"changelog/#version-0163-2023-12-23","title":"Version 0.16.3 \u2014 2023-12-23","text":"<p>Changed:</p> <ul> <li>Ignore Strava activities without a time series.</li> </ul>"},{"location":"changelog/#version-0162-2023-12-22","title":"Version 0.16.2 \u2014 2023-12-22","text":"<p>Changed:</p> <ul> <li>Make heatmap images that are downloaded look the same as the interactive one.</li> <li>Always emit the path when there is something wrong while parsing an activity file.</li> </ul>"},{"location":"changelog/#version-0161-2023-12-22","title":"Version 0.16.1 \u2014 2023-12-22","text":"<p>Fixed:</p> <ul> <li>Fix handling of TCX files on Windows. On that platform one cannot open the same file twice, therefore my approach failed. Now I close the file properly such that this should work on Windows as well.</li> </ul>"},{"location":"changelog/#version-0160-2023-12-22","title":"Version 0.16.0 \u2014 2023-12-22","text":"<p>Added:</p> <ul> <li>Add feature to render heatmap from visible area. GH-73</li> <li>Add offsets for equipment. GH-71</li> <li>Add action to convert Strava checkout to our format. GH-65</li> <li>Add simple search function. GH-70</li> </ul> <p>Fixed:</p> <ul> <li>Fix number of tile visits in explorer view. GH-69</li> <li>Filter out some GPS jumps. GH-54</li> </ul> <p>Removed:</p> <ul> <li>Remove heatmap image generation from clusters, remove Scikit-Learn dependency.</li> </ul>"},{"location":"changelog/#version-0153-2023-12-20","title":"Version 0.15.3 \u2014 2023-12-20","text":"<p>Fixed:</p> <ul> <li>Create temporary file for TCX parsing in the same directory. There was a problem on Windows where the program didn't have access permissions to the temporary files directory.</li> </ul>"},{"location":"changelog/#version-0152-2023-12-20","title":"Version 0.15.2 \u2014 2023-12-20","text":"<p>Fixed:</p> <ul> <li>Try to open GPX files in binary mode to avoid encoding issues. GH-74</li> </ul>"},{"location":"changelog/#version-0151-2023-12-16","title":"Version 0.15.1 \u2014 2023-12-16","text":"<p>Fixed:</p> <ul> <li>Add <code>if __name__ == \"__main__\"</code> clause such that one can use <code>python -m geo_activity_playground</code> on Windows.</li> </ul>"},{"location":"changelog/#version-0150-2023-12-13","title":"Version 0.15.0 \u2014 2023-12-13","text":"<p>Changed:</p> <ul> <li>Export all missing tiles in the viewport, not just the neighbors.</li> <li>Automatically retry Strava API when the rate limit is exhausted. GH-67</li> </ul> <p>Fixed:</p> <ul> <li>Give more helpful error messages when the are no activity files present.</li> </ul>"},{"location":"changelog/#version-0142-2023-12-12","title":"Version 0.14.2 \u2014 2023-12-12","text":"<p>Fixed:</p> <ul> <li>Fix broken Strava import (bug introduced in 0.14.0).</li> </ul>"},{"location":"changelog/#version-0141-2023-12-12","title":"Version 0.14.1 \u2014 2023-12-12","text":"<p>Fixed:</p> <ul> <li>Fix hard-coded part in KML import (bug introduced in 0.14.0).</li> </ul>"},{"location":"changelog/#version-0140-2023-12-12","title":"Version 0.14.0 \u2014 2023-12-12","text":"<p>Added:</p> <ul> <li>Allow setting host and port via the command line. GH-61</li> <li>Re-add download of explored tiles in area. GH-63</li> <li>Add some sort of KML support that at least works for KML exported by Viking. GH-62</li> </ul> <p>Changed:</p> <ul> <li>Do more calculations eagerly at startup such that the webserver is more responsive. GH-58</li> <li>Unify time handling, use UTC for all internal representations. GH-52</li> </ul>"},{"location":"changelog/#version-0130-2023-12-10","title":"Version 0.13.0 \u2014 2023-12-10","text":"<p>Added:</p> <ul> <li>Add cache migration functionality.</li> <li>Make sure that cache directory is created beforehand. GH-55</li> <li>Split tracks into segments based on gaps of 30 seconds in the time data. That helps with interpolation across long distances when one has paused the recording. GH-47</li> <li>Fix introduced bug. GH-56</li> <li>Add cache to heatmap such that it doesn't need to render all activities and only add new activities as needed.</li> <li>Add a footer. GH-49</li> </ul> <p>Changed:</p> <ul> <li>Revamp heatmap, use interpolated lines to provide a good experience even at high zoom levels.</li> <li>This also fixes the gaps that were present before. GH-34</li> <li>Only export missing tiles in the active viewport. GH-53</li> </ul> <p>Fixed:</p> <ul> <li>Add missing dependency to SciKit Learn again; I was too eager to remove that. GH-59</li> </ul>"},{"location":"changelog/#version-0120-2023-12-07","title":"Version 0.12.0 \u2014 2023-12-07","text":"<p>Changed:</p> <ul> <li>Change coloring of clusters, have a color per cluster. Also mark the square just as an overlay.</li> </ul> <p>Fixed:</p> <ul> <li>Fix bug with explorer tile page when the maximum cluster or square is just 1. GH-51</li> <li>Speed up the computation of the latest tiles.</li> </ul>"},{"location":"changelog/#version-0110-2023-12-03","title":"Version 0.11.0 \u2014 2023-12-03","text":"<p>Added:</p> <ul> <li>Add last activity in tile to the tooltip. GH-35</li> <li>Add explorer coloring mode by last activity. GH-45</li> <li>Actually implement <code>Activity/{Kind}/{Equipment}/{Name}.{Format}</code> directory structure.</li> <li>Document configuration file.</li> <li>Show time evolution of the number of explorer tiles, the largest cluster and the square size. GH-33</li> <li>Show speed distribution. GH-42</li> </ul> <p>Changed:</p> <ul> <li>Interpolate tracks to find more explorer tiles. GH-27</li> <li>Center map view on biggest explorer cluster.</li> </ul> <p>Fixed:</p> <ul> <li>Fix bug that occurs when activities have no distance information.</li> </ul>"},{"location":"changelog/#version-0100-2023-11-27","title":"Version 0.10.0 \u2014 2023-11-27","text":"<p>Changed:</p> <ul> <li>Use a grayscale map for the explorer tile maps. GH-38</li> <li>Explicitly write \u201c0 km\u201d in calendar cells where there are no activities. GH-39, GH-40</li> </ul>"},{"location":"changelog/#version-090-2023-11-26","title":"Version 0.9.0 \u2014 2023-11-26","text":"<p>Added:</p> <ul> <li>Support TCX files. GH-8</li> </ul> <p>Changed:</p> <ul> <li>Certain exceptions are not skipped when parsing files. This way one can gather all errors at the end. GH-29</li> </ul> <p>Fixed:</p> <ul> <li>Fix equipment view when using the directory source. GH-25</li> <li>Fix links from the explorer tiles to the first activity that explored them. GH-30</li> <li>Fix how the API response from Strava is handled during the initial token exchange. GH-37</li> </ul>"},{"location":"changelog/#version-083-2023-11-26","title":"Version 0.8.3 \u2014 2023-11-26","text":"<p>Changed:</p> <ul> <li>Only compute the explorer tile cluster size if there are cluster tiles. Otherwise the DBSCAN algorithm doesn't work anyway. GH-24</li> <li>Remove allocation of huge array. GH-23</li> </ul>"},{"location":"changelog/#version-082-2023-11-26","title":"Version 0.8.2 \u2014 2023-11-26","text":"<p>Fixed:</p> <ul> <li>Some FIT files apparently have entries with explicit latitude/longitude values, but those are null. I've added a check which skips those points.</li> </ul>"},{"location":"changelog/#version-081-2023-11-26","title":"Version 0.8.1 \u2014 2023-11-26","text":"<p>Fixed:</p> <ul> <li>Fix reading of FIT files from Wahoo hardware by reading them in binary mode. GH-20.</li> <li>Fix divide-by-zero error in speed calculation. GH-21</li> </ul>"},{"location":"changelog/#version-080-2023-11-26","title":"Version 0.8.0 \u2014 2023-11-26","text":"<p>Added:</p> <ul> <li>Compute explorer cluster and square size, print that. GH-2</li> </ul> <p>Changed:</p> <ul> <li>Make heart rate zone computation a bit more flexibly by offering a lower bound for the resting heart rate.</li> <li>Open explorer map centered around median tile.</li> <li>Make it compatible with Python versions from 3.9 to 3.11 such that more people can use it. GH-22</li> </ul>"},{"location":"changelog/#version-070-2023-11-24","title":"Version 0.7.0 \u2014 2023-11-24","text":"<p>Added:</p> <ul> <li>Add Squadratinhos, which are explorer tiles at zoom 17 instead of zoom 14.</li> </ul> <p>Changed:</p> <ul> <li>Reduce memory footprint for explorer tile computation.</li> </ul>"},{"location":"changelog/#version-060-2023-11-24","title":"Version 0.6.0 \u2014 2023-11-24","text":"<p>Added:</p> <ul> <li>Interactive map for each activity.</li> <li>Color explorer tiles in red, green and blue. GH-2</li> <li>Add mini maps to the landing page. GH-9</li> <li>Add fullscreen button to the maps. GH-4</li> <li>Add favicon. GH-19</li> <li>Added some more clever caching to the explorer tiles such that loading the page with explorer tiles comes up in just a few seconds.</li> <li>Add a triplet of time series plots (distance, altitude, heart rate) for each activity.</li> <li>Show plot for heart rate zones per activity. GH-12</li> <li>Handle activities without any location points. GH-10</li> <li>Resolve Strava Gear name. GH-18</li> <li>Add page for equipment. GH-3</li> <li>Add a pop-up with some metadata about the first visit to the explorer tiles. GH-14</li> <li>Integrate missing explorer tiles into the web interface. GH-7.</li> <li>Color activity line with speed. GH-13</li> <li>Add interactive heatmap.</li> <li>Add margin to generated heatmaps. GH-1</li> </ul> <p>Changed:</p> <ul> <li>Directly serve GeoJSON and Vega JSON embedded in the document.</li> <li>Automatically detect which source is to be used. GH-16</li> <li>Fix the name of the script to be <code>geo-activity-playground</code> and not just <code>geo-playground</code>. GH-11</li> </ul>"},{"location":"changelog/#version-050-2023-11-15","title":"Version 0.5.0 \u2014 2023-11-15","text":"<p>Added:</p> <ul> <li>Add some plots for the Eddington number. GH-3</li> </ul>"},{"location":"changelog/#version-040-2023-11-10","title":"Version 0.4.0 \u2014 2023-11-10","text":"<p>Added:</p> <ul> <li>Add some more plots.</li> </ul>"},{"location":"changelog/#version-030-2023-11-10","title":"Version 0.3.0 \u2014 2023-11-10","text":"<p>Added:</p> <ul> <li>Start to build web interface with Flask.</li> <li>Add interactive explorer tile map.</li> </ul> <p>Removed:</p> <ul> <li>Remove tqdm progress bars and use colorful logging instead.</li> </ul>"},{"location":"changelog/#version-020-2023-11-05","title":"Version 0.2.0 \u2014 2023-11-05","text":"<p>Added:</p> <ul> <li>Export missing tiles as GeoJSON.</li> <li>Add Strava API.</li> <li>Add directory source.</li> </ul> <p>Changed:</p> <ul> <li>Unify command line entrypoint.</li> <li>Crop heatmaps to fit.</li> </ul>"},{"location":"changelog/#version-013-2023-07-28","title":"Version 0.1.3 \u2014 2023-07-28","text":"<p>Added:</p> <ul> <li>Generate some heatmap images.</li> <li>Generate an explorer tile video.</li> </ul>"},{"location":"connect-strava-api/","title":"Connect Strava API","text":"<p>You might have all your data on the Strava service and would like to use this for additional analytics without moving your data. That is fine.</p> <p>If you don't mind a bit of rate-limiting, you can just directly go ahead and start the webserver. It will offer to connect with Strava.</p>"},{"location":"connect-strava-api/#your-own-strava-app","title":"Your own Strava App","text":"<p>In order to use the Strava API without sharing the rate-limiting with other users, you need to create your own app. If my explanation doesn't suit you, have a look at this how-to guide as well.</p> <p>Navigate to the API settings page and create an app. It only needs to have read permissions.</p> <p>After you are done with that, you can see your App here:</p> <p></p> <p>There is a \"client ID\" and a \"client secret\" that we are going to need for the next step. In general our app could be used by all sorts of people who can then access their data only. We want to access our own data, but we still need to authorize our app to use our data. </p> <p>Open the webserver of this program and go the Strava API setup page. Enter your client ID and client secret, click on \"Connect to Strava\".</p> <p>This will prompt an OAuth2 request where you have to grant permissions to your app. After that you will be redirected back to the app and it should be set up. At the moment you need to restart the webserver such that it can start to download the activities. Due to rate-limiting it can still take a while.</p>"},{"location":"connect-strava-api/#use-export-to-avoid-rate-limiting","title":"Use export to avoid rate limiting","text":"<p>When you first start this program and use the Strava API as a data source, it will download the metadata for all your activities. Then it will start to download all the time series data for each activity. Strava has a rate limiting, so after the first 200 activities it will crash and you will have to wait for 15 minutes until you can try again and it will download the next batch.</p> <p>Therefore it is recommended to use a Strava export in order to get started quicker. For this go to the Strava account download page and download all your data. You will get a ZIP file. Unpack the files into <code>Playground/Strava Export</code>. These will be picked up there. Activities from Strava will only be downloaded after importing all these, and only the ones after the last one in the export will be downloaded. This way you can get started much quicker.</p>"},{"location":"connect-strava-api/#skip-strava-download","title":"Skip Strava download","text":"<p>If you don't want to download new activities from Strava, use <code>--skip-reload</code> to have the webserver start right away.</p>"},{"location":"connect-strava-api/#rescan-all-strava-activities","title":"Rescan all Strava activities","text":"<p>The scanning of Strava activities resumes after the last activity that was imported. If you want to override this behavior temporarily, you can add <code>--strava-start YYYY-MM-DD</code> and/or <code>--strava-end YYYY-MM-DD</code> at the end of the command line (after <code>serve</code>). Replace the placeholders with a date like 2025-07-13. This will trigger a scan of Strava activities within the specified time range.</p>"},{"location":"create-a-base-directory/","title":"Create a Base Directory","text":"<p>Geo Activity Playground lets you explicitly choose where you want to have your files.</p> <p>Just create a directory somewhere in your user directory. It can be on your desktop, it can be in Google Drive or Dropbox.</p>"},{"location":"create-a-base-directory/#finding-the-path-for-linux","title":"Finding the path for Linux","text":"<p>On Linux you will need to figure out the path of your base directory. This might work by pressing CTRL+L and then copying the path out of the address bar. For me it is <code>/home/mu/Dokumente/Karten/Playground/</code>, yours might look similar.</p>"},{"location":"create-a-base-directory/#add-a-launcher-script-for-windows","title":"Add a launcher script for Windows","text":"<p>On Windows you can add a launcher script into your base directory such that you can start the program without having to meddle with the command line.</p> <p>Right-click into the base directory and in the context menu select \u201cCreate New\u201d and then \u201cText File\u201d. Name it <code>start.bat</code>. Windows will ask you whether want to change the suffix (file extension) because it might get unusable. Yes, we want to do that. It should look like this:</p> <p></p> <p>Then right-click on that file and select \u201cEdit\u201d. A text editor will open up. Put the following content into this file:</p> <pre><code>python -m geo_activity_playground serve\npause\n</code></pre> <p>Then save and close it. I need you to create this file yourself and cannot offer a download because the Windows Defender will not allow you to execute such script files downloaded as a security precaution. If you create the file yourself, it will let you execute it.</p> <p>Once you have the <code>start.bat</code> there, you can double-click on it to execute it. A new terminal window should open and it should start to parse your activities.</p> <p></p> <p>After it has loaded everything, you can open http://127.0.0.1:5000/ in your browser.</p>"},{"location":"create-a-privacy-zone/","title":"Create a Privacy Zone","text":"<p>On each activity page you will find a \u201cshare picture\u201d for use in social media and messengers. You might want to exclude your home or work from these. For this you can define arbitrary polygons as \"privacy zones\".</p> <p>To create such a polygon, go to GeoJSON.io. You will see a map similar to this one:</p> <p></p> <p>Select the polygon tool and click on the map to span the polygon.</p> <p></p> <p>Once you are done, press Enter to finish the polygon. In the left panel the GeoJSON output will appear:</p> <p></p> <p>For this case, we have this GeoJSON:</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"coordinates\": [\n          [\n            [\n              6.87987514009842,\n              50.68272071401333\n            ],\n            [\n              6.878628929151887,\n              50.6819310903943\n            ],\n            [\n              6.8780142440226655,\n              50.68125883278765\n            ],\n            [\n              6.879563587362242,\n              50.68022375065988\n            ],\n            [\n              6.880599289703014,\n              50.68029311254671\n            ],\n            [\n              6.8814665851591315,\n              50.68102940933676\n            ],\n            [\n              6.881542368256589,\n              50.681723011688035\n            ],\n            [\n              6.8812729172415175,\n              50.682176515374465\n            ],\n            [\n              6.87987514009842,\n              50.68272071401333\n            ]\n          ]\n        ],\n        \"type\": \"Polygon\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Paste this in the appropriate settings menu.</p> <p>You can name the zone to help you remember what it encompasses. You can add multiple zones.</p> <p>Points that are within any of the privacy zones will not be shown in the share pictures. Except when all of the points are in the privacy zone, then all the points will be shown.</p>"},{"location":"eddington-number/","title":"Eddington Number","text":"<p>The astronomer Sir Arthur Eddington like to go on longer bike rides. Apparently he did a lot of rides and had 84 days where he rode at least 84 miles. The Eddington number for cycling was coined from this.</p> <p>If you have an Eddington number E, it means that you have had E days with at least E kilometer distance. At the time of writing my number is 62, which means that I rode at least 62 km on 62 separate days. If I want to extend it to 63, I would need to have at least 63 km on 63 separate days. My bike rides that are just 62 km long will not count any more, making this challenge really hard.</p> <p>In the following plot you can see in blue the number of days that exceed the given distance. You can see that I have a 998 days that exceed 1 km, that's pretty easy when one just records enough data over many years. But then there are only 259 days where I exceed 20 km as this is beyond the distance that I have when I only go for a walk or run some simple errands.</p> <p></p> <p>The red curve indicates how many rides one needs to get the Eddington number. As it is a semi-log plot, the straight line is curved like a log-curve.</p> <p>You can see this cliff at around 80 km. That is the distance that I ride to work and back. I have many days with around 80 km, but longer rides are only on occasional bike trips. Therefore I think I will eventually make it to an Eddington number of 80, but beyond that will be super difficult.</p> <p>This is a life-long challenge, so who knows what happens in the future.</p>"},{"location":"eddington-number/#length-unit","title":"Length unit","text":"<p>The definition of the Eddington number depends on the length unit that one has. Eddington as a British person used the English mile as a base unit. Therefore his number of 84 is actually harder to achieve than a 84 based on kilometers because he needed to exceed 135 km (84 mi) on each ride.</p> <p>Therefore using a different length unit as a base changes the meaning. The kilometer is easier, the mile (1609.344 m) is harder. One could also use nautical miles (1852 m). And while we are at arbitrary unit systems, we could also use furlongs (201.168 m).</p>"},{"location":"elevation-gain-from-noisy-data/","title":"Elevation Gain from Noisy Data","text":"<p>Here I want to demonstrate why computing altitude gain from GPS data is notoriously hard. You will learn how noisy data leads to inflated values. This is meant as an explanation why the elevation data shown has little merit unless you have a very good recording device.</p>"},{"location":"elevation-gain-from-noisy-data/#example-with-bad-data","title":"Example with bad data","text":"<p>This is an mountain bike activity that I recorded with a Garmin Venu Sq that does not have a barometric altitude sensor but just the GPS.</p> <p></p> <p>You can see that the tour started at 450 m, went to 650 m, down to 350 m, back up to 660 m, down to 570 m, up to 670 m, back down to 500 m. So if one wants to gets a rough estimate on the elevation gain, that would be 200 m + 310 m + 100 m = 610 m at least.</p> <p>How do we now compute that from the data? One can take the difference in elevation between subsequent points and plot that. There are huge spikes, so I have filtered out any points that suggest a change of 30 m altitude in 5 s.</p> <p></p> <p>In this image we can already see that there are constantly changes in the elevation in order of \u00b11 m. This is the lacking accuracy of the GPS devices which has lots of jitter. Compare this plot with the first one: Can you see the big ascension? Can you see the downhill ride at the end? No, it gets lost in the noise!</p> <p>For the elevation gain we only want to count when the elevation has increased. So we remove the negative differences and only keep the differences. Then the plot looks like this:</p> <p></p> <p>In the next step we do the cumulative sum of all these little elevation gains and plot those. With a lot of imagination one can see the ascension in the middle part.</p> <p></p> <p>But in the range from 10:45 to 11:30, where I was riding in a flat section, there is a constant increase in elevation gain, giving me almost 200 m at the end. This is the accumulation of noise.</p> <p>You can see that this ends up being 1,600 m. The rough estimation said that 610 m is a reasonable number if we only count coarse elevation gain. But here we count microscopic elevation gain.</p>"},{"location":"elevation-gain-from-noisy-data/#simulation-with-pure-noise","title":"Simulation with pure noise","text":"<p>The problem really is the noise. We can show how bad it is by just generating a bunch of random measurements and see how this would fare in this analysis. I am generating data points assuming that my GPS has a standard deviation of 1 m, which seems unreasonably accurate. I generate points every 5 seconds for a two hour trip, so that's about 7200 points. But in this experiment, there is no change in the elevation whatsoever.</p> <p></p> <p>You can see that although we're just adding up noise, we have around 4,000 m of elevation gain computed by this method.</p> <p>So unless we can remove the noise from the GPS data, we're doomed to compute a completely inflated elevation gain number.</p>"},{"location":"elevation-gain-from-noisy-data/#exponential-moving-average-smoothing","title":"Exponential moving average smoothing","text":"<p>We need some way of smoothing the data, ideally one which is \u201ccausal\u201d, i.e. only forward looking. An exponential moving average would do the trick.</p> <p>If we do that, we will smooth out some of the measurement error. But even with a lot of smoothing, there is still noise left. In this experiment the real altitude is always 0, we only see the GPS noise.</p> <p></p> <p>You can see that now it is much smoother, fluctuating only between -0.4 and +0.4 m.</p> <p>From this we can compute the cumulative elevation gain as well. But we still acumulate 120 m of fake elevation gain over these two hours.</p> <p></p>"},{"location":"elevation-gain-from-noisy-data/#applying-smoothing-to-the-mountain-bike-tour","title":"Applying smoothing to the mountain bike tour","text":"<p>We can see how it looks like for the mountain bike tour:</p> <p></p> <p>This was smoothed with <code>span=50</code>, so it has used like 50 previous measurements to smooth it out. But is that a good value? Should we perhaps use <code>span=100</code>? If we do that, it then looks like this:</p> <p></p> <p>If we use <code>span=1000</code>, then it clearly is too much smoothing:</p> <p></p> <p>So what is a good value? We can go through various <code>span</code> values and see how much smoothing gets how much altitude gain. We can then see that depending on the span value, we get a different total elevation gain on the mountain bike trip:</p> <p></p> <p>And here we see that without smoothing there is around 1,400 m of altitude gain. But that feels too much. Increasing the smoothing we end up at around 610 m as estimated in the beginning. Likely it should be a bit more. Increasing the smoothing will eventually smooth out all the mountains, such that this curve will eventually converge to 0. Which is clearly wrong as well.</p> <p>We would need to pick some value which feels somewhat right. But it would not be as objective as distance or time would be. By choosing the <code>span</code> value one can determine how much elevation gain there is. The value also depends on the measurement device which one has used, which is an absurd dependency.</p>"},{"location":"elevation-gain-from-noisy-data/#conclusion","title":"Conclusion","text":"<p>Strava very likely uses the actual elevation data from maps to correct this. This is the superior method because elevation data is very noisy by default. But in Geo Activity Playground we don't have the actual map at this point and hence we cannot do this.</p> <p>Elevation gain data is displayed, but unless you have a very accurate recording device.</p>"},{"location":"explorer-tiles/","title":"Explorer Tiles","text":"<p>In this explanation you will learn about tiling scheme that Open Street Map uses. Then you will learn about the Explorer Tiles that are derived from that scheme.</p>"},{"location":"explorer-tiles/#spherical-earth-to-flat-map","title":"Spherical earth to flat map","text":"<p>The world is a sphere but our computer screens are flat. Paper is also flat. How do we map the surface of earth to a flat chart? There is no unique way, there are infinitely many ways to do it. There is a field of mathematics, namely manifold theory, that studies this problem.</p> <p>The Open Street Map uses the Web Mercator coordinate system to map from latitude and longitude to coordinates on the chart. The following Python code converts latitude and longitude into x and y coordinates:</p> <pre><code>def web_mercator(lat: float, lon: float, zoom: int = 14) -&gt; tuple[int, int]:\n    x = (1 + np.radians(lon) / np.pi) / 2\n    y = (1 - np.arcsinh(np.tan(np.radians(lat))) / np.pi) / 2\n    return x, y\n</code></pre> <p>These both range from 0 to 1, so they create a chart which contains the whole world in the unit square.</p> <p>This is a convenient projection for online maps as the whole map fits into a square and not some rounded shape like for instance the Hammer projection. The Mercator projection doesn't preserve area or angles (that's why Greenland is so big), but meridian lines are always straight and parallel to each other. The Hammer projection preserves area but the meridian lines aren't straight.</p>"},{"location":"explorer-tiles/#organizing-the-world","title":"Organizing the world","text":"<p>With the Web Mercator projection we have a projection into x and y coordinates. But these are floating point values. We need to map them to pixels. We can just multiply the coordinates with the desired image size and then have it in pixels. But in order to make out some details around your city, the image size would have to be huge. How can one render this map on a screen without creating an image file that is too large?</p> <p>The establishes system in computer science is the quad tree where each square region of space is split up into four quadrants. Each of these four smaller squares then splits up into another four squares. We can organize these squares in a tree, each square has its four smaller squares as children on a lower level. A quad tree with two levels looks like this:</p> <p></p> <p>Maps accessible via the web browser are usually served as little image tiles. These tiles exactly correspond to the squares in the quad tree. This explains how we can divide up that unit square into smaller pieces and still retain the hierarchy and a concept of neighborhood.</p> <p>Each rendered tile image is 256\u00d7256 pixels in size. The zoom levels zoom in by a factor of two. As you zoom in, we use render image tiles using the squares from one deeper level in the quad tree.</p> <p>The following prescription maps from latitude and longitude (given in degrees) to tile indices by making use of the fact that with each zoom level we split the square by a factor of two:</p> <pre><code>def compute_tile(lat: float, lon: float, zoom: int) -&gt; tuple[int, int]:\n    x = (1 + np.radians(lon) / np.pi) / 2\n    y = (1 - np.arcsinh(np.tan(np.radians(lat))) / np.pi) / 2\n    n = 2**zoom\n    return int(x * n), int(y * n)\n</code></pre> <p>This is how we can compute the tile number from any coordinate at any zoom level.</p> <p>A map viewer will then download individual map tiles such that it can fill the whole viewport. As you pan, it will download more tiles. When you zoom, it will download different tile images. This way all it ever needs to display to you is 256\u00d7256 pixel size images, but you can explore the world on all levels this way.</p>"},{"location":"explorer-tiles/#explorer-tiles_1","title":"Explorer tiles","text":"<p>Online map viewers use these tiles but they don't show the boundaries. Hence the tiles are an implementation detail.</p> <p>Somebody thought that it would be fun to use these tiles for something else. At zoom level 14 the tiles have a side length of roughly 1.5 km in Germany. These tiles are used as the basis for explorer tiles. The basic idea is that every tile where you have at least one point in an activity is considered an explored tile.</p> <p>From your activities the program will extract all the tiles that you have visited. And then it does a few things with those. One main thing is that it will display these on an interactive map. When we zoom into one area where I've been on vacation in 2023, you can see the explored tiles there:</p> <p></p> <p>The filled tiles are explored, I have been there. The colored tiles are cluster tiles, that means that all their four neighbor tiles are also explored.</p> <p>You can see here how I have explored a region and ensured that it is mostly contiguous.</p> <p>There is another vacation from 2013 where I wasn't aware of the cluster tiles. I just did some bike trips and didn't look out for the tiles. There the tiles look like this:</p> <p></p> <p>You see all these gaps in there. Also there are three different clusters which are not connected. Each unique cluster is assigned a different color such that one can see where there are gaps between the cluster tiles. And filling the gaps is what the explorer tiles are about: This OCD (obsessive compulsive disorder) like craving to fill in the gaps.</p> <p>Let's take a look at my main cluster of explorer tiles. Here I have explored much more than in the areas where I was on vacation.</p> <p></p> <p>You can see an additional feature, the blue square. This is the one largest square which can be fit into all explored tiles. In this picture it has size 21\u00b2. The idea of the square is to have a really tough challenge. Not only does one need to explore increasingly many tiles to expand the square by one unit, there must not be any gaps.</p> <p>As you can see in this picture, there is a tile missing right at the top edge. I will never be able to get that because that is an off-limits area of the German air force at the airport. So I can expand my square to the south only.</p> <p>You can click on each tile and get some information about that particular tile. You can see when you first explored that and with which activity. Also it shows the last activity there as well as the number of activities. If it is a local cluster, it will also show the cluster size.</p>"},{"location":"explorer-tiles/#squadratinhos","title":"Squadratinhos","text":"<p>The explorer tiles at zoom level 14 are best suited for cycling and to discover the area around the city. There is a derived definition, the squadratinhos which are defined at zoom level 17 and therefore a factor 8 smaller in each direction. Each explorer tile is therefore divided into 256 squadratinhos.</p> <p>These are better suited for walking and making sure that you really explored every little place in your neighborhood. Since they are so small, there are many properties which one cannot go onto, like industrial sites, airports or just a wide river.</p> <p>For my home city it looks like this:</p> <p></p> <p>You can see how the squadratinhos are much smaller than the explorer tiles and how they lend themselves to more local exploring.</p>"},{"location":"get-help/","title":"Get Help","text":"<p>If you get stuck at any point, have an idea for a feature or would like to get in contact for any other reason, please feel free to do so.</p> <p>This is a hobby tinkering project of Martin Ueding. I create this in my free time, mostly for myself and also for others. This is not a polished product, hence it is quite natural that you might find some rough edges.</p> <p>You can open a ticket via GitHub (preferred) or write an e-mail to mu@martin-ueding.de. It might take a while until I can answer, but I usually answer every request.</p>"},{"location":"heart-rate-zones/","title":"Heart Rate Zones","text":"<p>The heart rate alone isn't too helpful, I feel. What puts it into perspective are the heart rate zones which put the heart rate into certain intervals.</p> <p>The definition of the heart rate zones is not standardized. Usually there are five zones and they have the same names. What differs is how their ranges are computed and there is some chaos around that.</p> <p>All definitions that I found take the maximum heart rate as the upper limit. One can measure this as part of a professional training or just use the 220 minus age prescription which at least for me matches close enough. What they differ on is how they use a lower bound. It seems that Polar or REI basically use 0 as the lower bound. My Garmin system also uses 0 as the lower bound. But as one can see in this blog, one can also use the resting heart rate as the lower bound.</p> <p>Based on the maximum and resting heart rate we will then compute the heart rate zones using certain percentages of effort. We can compute the heart rate as the following:</p> <p>rate = effort \u00d7 (maximum \u2013 minimum) + minimum</p> <p>The zones then take the following efforts:</p> Zone Effort Training 1 50 to 60 % Warmup/Recovery 2 60 to 70 % Base Fitness 3 70 to 80 % Aerobic Endurance 4 80 to 90 % Anerobic Capacity 5 90 to 100 % Speed Training <p>You can decide how you want to do work with that. If you want to have the same definitions that say Garmin uses, you need to just enter your birth year and we can compute the rest. If you want to use a lower bound, you need to specify that.</p>"},{"location":"import-activity-files/","title":"Import Activity Files","text":"<p>One way to get your activities into Geo Activity Playground is by adding files to a directory in your base directory. See the options to record activities.</p> <p>This how-to assumes that you have a way to record activities and transfer them to your computer.</p>"},{"location":"import-activity-files/#supported-file-formats","title":"Supported file formats","text":"<p>The supported file formats are the following:</p> <ul> <li>GPX: Widely spread format.</li> <li>FIT: Format by Garmin, used by various fitness devices.</li> <li>KML, KMZ: Default with Google Earth</li> <li>TCX</li> <li>Simra CSV</li> </ul>"},{"location":"import-activity-files/#add-activity-files-on-the-file-system","title":"Add activity files on the file system","text":"<p>Inside of your base directory, create a directory named <code>Activities</code> for your activities. Put your files there. If you want, you can have an arbitrary directory structure within that, just the uppermost directory needs to have the fixed name.</p> <p>The program will treat the files as read-only and does not modify them.</p> <p>You can manually rename, move or delete your activity files, but the program needs to reload to respect these changes. You can restart the program or visit \u201cScan New Activities\u201d in the admin menu of the web interface.</p>"},{"location":"import-activity-files/#metadata-extraction","title":"Metadata extraction","text":"<p>Most activity file formats contain basic data like <code>date</code>, <code>time</code> and <code>track points</code>. Each activity in geo-activity-playground also has the metadata fields <code>kind</code>, <code>equipment</code> and <code>name</code>. They can be extracted from files that contain them.</p> <p>If no metadata is found, <code>kind</code> and <code>equipment</code> default to <code>Unknown</code>. The <code>name</code> is then extracted from the file name (without the suffix). So for <code>Activities/2024-03-03-17-42-10 Home to Bakery.gpx</code> the <code>name</code> is <code>2024-03-03-17-42-10 Home to Bakery</code>.</p>"},{"location":"import-activity-files/#next-steps","title":"Next steps","text":"<p>Once you have your files put into the directory, you're all set and can proceed with the next steps.</p> <p>You can extend the directory structure to categorize your activities, see advanced metadata extraction.</p>"},{"location":"install-on-linux/","title":"Install on Linux","text":"<p>In this how-to guide you will install the latest stable version of this project on Linux.</p> <p>The best way to install this project is using <code>pipx</code> as it decouples each program from the other ones. First ensure that you have it installed by running the command applicable to your Linux distribution:</p> Distribution Command Ubuntu, Debian <code>sudo apt install pipx</code> Fedora, RedHat <code>sudo dnf install pipx</code> Arch, Manjaro <code>sudo pacman -Syu python-pipx</code> <p>Then, using <code>pipx</code>, you install the latest version using this command:</p> <pre><code>pipx install geo-activity-playground\n</code></pre>"},{"location":"install-on-linux/#testing-whether-it-works","title":"Testing whether it works","text":"<p>Next you can try to start the program to see whether the installation has worked correctly by just entering the following into the terminal:</p> <pre><code>geo-activity-playground --help\n</code></pre> <p>Does this work? Good! Then move on to create a base directory.</p> <p>If you get an error that reads like \u201ccommand not found\u201d, then you need to add local bin to PATH.</p>"},{"location":"install-on-linux/#installing-updates","title":"Installing updates","text":"<p>At some later point you likely want to upgrade to the latest version. For this use the following command:</p> <pre><code>pipx upgrade --pip-args \"--upgrade-strategy eager\" geo-activity-playground\n</code></pre>"},{"location":"install-on-macos/","title":"Install on macOS","text":"<p>In this how-to guide you will install the latest stable version of this project on macOS.</p> <p>I don't have a Mac myself, hence I cannot test whether this guide works. Please be so kind and give feedback if it doesn't work.</p>"},{"location":"install-on-macos/#installing-homebrew","title":"Installing Homebrew","text":"<p>As a first step, install Homebrew if you haven't done so already. For this, follow the instruction on their website. At the time of writing they suggest to open the Terminal application and pasting in the following:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre>"},{"location":"install-on-macos/#installing-pipx","title":"Installing pipx","text":"<p>Then as a next step, install pipx. This makes use of Homebrew. At the time of writing you need to execute these commands in the terminal:</p> <pre><code>brew install pipx\npipx ensurepath\n</code></pre>"},{"location":"install-on-macos/#installation-via-pipx","title":"Installation via pipx","text":"<p>Now you have <code>pipx</code> available and can install the project with this:</p> <pre><code>pipx install geo-activity-playground\n</code></pre>"},{"location":"install-on-macos/#testing-whether-it-works","title":"Testing whether it works","text":"<p>Next you can try to start the program to see whether the installation has worked correctly by just entering the following into the terminal:</p> <pre><code>geo-activity-playground --help\n</code></pre> <p>Does this work? Good! Then move on to create a base directory.</p> <p>If you get an error that reads like \u201ccommand not found\u201d, then you need to add local bin to PATH.</p>"},{"location":"install-on-macos/#installing-updates","title":"Installing updates","text":"<p>At some later point you likely want to upgrade to the latest version. For this use the following command:</p> <pre><code>pipx upgrade --pip-args \"--upgrade-strategy eager\" geo-activity-playground\n</code></pre>"},{"location":"install-on-windows/","title":"Install on Windows","text":"<p>This how-to will show you the installation of the project on Windows. Here in the guide we use Windows 10 with the locale set to German, it should generalize to Windows 11 as well.</p>"},{"location":"install-on-windows/#installing-python","title":"Installing Python","text":"<p>First we need to install Python because that doesn't ship with Windows. Fortunately we can get it from the Microsoft Store. Open that via the start menu and you should see something like this:</p> <p></p> <p>Type \u201cPython\u201d into the search bar at the top. In the search results you likely see different Python versions like 3.11 and 3.10. The project is compatible with 3.10 to 3.12; I'd suggest to just go with 3.12. In case that you have already installed one of the other compatible versions, you can skip this step.</p> <p>Here we select Python 3.11.</p> <p></p> <p>In the top right there is a blue button to install the software. Click that.</p>"},{"location":"install-on-windows/#installing-the-project","title":"Installing the project","text":"<p>After that has run through, you need to open the Power Shell via the start menu. It should open a command line window like this:</p> <p></p> <p>We can verify that Python is working by entering <code>python --version</code> and <code>pip --version</code>. It should give a sensible version message like this:</p> <p></p> <p>Then we can ues PIP to install the project. Type the following:</p> <pre><code>pip install -U geo-activity-playground\n</code></pre> <p>It should look like this:</p> <p></p> <p>Then press Enter and it will install it, looking like this:</p> <p></p> <p>That might take a while. After that has run through, it should give a success message:</p> <p></p> <p>Then we're done with this window, you can close it now.</p>"},{"location":"install-on-windows/#next-steps","title":"Next steps","text":"<p>As a next step you need to create a base directory.</p>"},{"location":"moving-from-strava/","title":"Moving from Strava","text":"<p>If you have been using Strava up to this point but want to use this project exclusively from now on, this is the correct guide. Here I will show how you can convert your data from Strava into the format of this project and keep adding new data without Strava in the future.</p>"},{"location":"moving-from-strava/#download-your-archive-from-strava","title":"Download your archive from Strava","text":"<p>Go to the Strava account download page and request a download of your data. This will take a while and you get a notification via e-mail when it is done.</p> <p>Once it has run through, you will be able to download a ZIP file. Once extracted, it will have a structure like this:</p> <pre><code>.\n\u251c\u2500\u2500 activities  [2217 entries exceeds filelimit, not opening dir]\n\u251c\u2500\u2500 activities.csv\n\u251c\u2500\u2500 applications.csv\n\u251c\u2500\u2500 bikes.csv\n\u251c\u2500\u2500 blocks.csv\n\u251c\u2500\u2500 categories_of_personal_information_we_collect.pdf\n\u251c\u2500\u2500 clubs\n\u251c\u2500\u2500 clubs.csv\n\u251c\u2500\u2500 comments.csv\n\u251c\u2500\u2500 community_content.json\n\u251c\u2500\u2500 community_personal_data.json\n\u251c\u2500\u2500 components.csv\n\u251c\u2500\u2500 connected_apps.csv\n\u251c\u2500\u2500 contacts.csv\n\u251c\u2500\u2500 email_preferences.csv\n\u251c\u2500\u2500 events.csv\n\u251c\u2500\u2500 favorites.csv\n\u251c\u2500\u2500 flags.csv\n\u251c\u2500\u2500 followers.csv\n\u251c\u2500\u2500 following.csv\n\u251c\u2500\u2500 general_preferences.csv\n\u251c\u2500\u2500 global_challenges.csv\n\u251c\u2500\u2500 goals.csv\n\u251c\u2500\u2500 group_challenges.csv\n\u251c\u2500\u2500 information_we_disclose_for_a_business_purpose.pdf\n\u251c\u2500\u2500 local_legend_segments.csv\n\u251c\u2500\u2500 logins.csv\n\u251c\u2500\u2500 media  [252 entries exceeds filelimit, not opening dir]\n\u251c\u2500\u2500 media.csv\n\u251c\u2500\u2500 memberships.csv\n\u251c\u2500\u2500 messaging.json\n\u251c\u2500\u2500 metering.csv\n\u251c\u2500\u2500 mobile_device_identifiers.csv\n\u251c\u2500\u2500 orders.csv\n\u251c\u2500\u2500 partner_opt_outs.csv\n\u251c\u2500\u2500 posts.csv\n\u251c\u2500\u2500 privacy_zones.csv\n\u251c\u2500\u2500 profile.csv\n\u251c\u2500\u2500 profile.jpg\n\u251c\u2500\u2500 reactions.csv\n\u251c\u2500\u2500 routes\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 1.gpx\n\u251c\u2500\u2500 routes.csv\n\u251c\u2500\u2500 segments.csv\n\u251c\u2500\u2500 shoes.csv\n\u251c\u2500\u2500 social_settings.csv\n\u251c\u2500\u2500 starred_routes.csv\n\u251c\u2500\u2500 starred_segments.csv\n\u251c\u2500\u2500 support_tickets.csv\n\u2514\u2500\u2500 visibility_settings.csv\n</code></pre> <p>This directory contains a file <code>activities.csv</code> with the metadata and also a directory <code>activities</code> with the files that you have recorded.</p>"},{"location":"moving-from-strava/#convert-your-checkout","title":"Convert your checkout","text":"<p>Use the following command to create a directory from your Strava actitivies:</p> <pre><code>geo-activity-playground convert-strava-checkout ~/Downloads/export_123456/ ~/Documents/Outdoors/Playground\n</code></pre> <p>This should read through all the activities and create a directory structure with the pattern <code>~/Documents/Outdoors/Playground/Activities/{Kind}/{Equipment}/{Commute}/{Date} {Time} {Name}.{Suffix}</code>. For instance one file might be named <code>Activities/Run/5212701.0/2019-07-09 09-59-25 Around the \u5317\u4eac\u5927\u5b66 campus.gpx.gz</code>.</p> <p>The equipment might have nonsensical seeming names like <code>10370891.0</code>. The problem here is that Strava doesn't export the list of activities with that index. If your equipment doesn't have a nickname, it will just be such a number.</p>"},{"location":"moving-from-strava/#use-the-directory","title":"Use the directory","text":"<p>Now that the files from Strava are converted, consult the guide on using activity files to proceed from here.</p>"},{"location":"moving-from-strava/#recording-more-activities","title":"Recording more activities","text":"<p>Now that you don't record via Strava, you will need some other app to record activities..</p>"},{"location":"plan-missing-tile-rides/","title":"Plan Missing Tile Rides","text":"<p>Looking at these maps with explorer tiles you can see the gaps. And if you feel challenged to fill those, you might want to plan a \u201ctactical bike ride\u201d to explore those. In this how-to guide you will learn how to export the missing tiles, plan a route and get navigated along it.</p>"},{"location":"plan-missing-tile-rides/#missing-tile-files","title":"Missing tile files","text":"<p>Let us take another look at my tile history in Sint Annaland:</p> <p></p> <p>You can see those gaps in the clusters. To make it easier to explore tiles while on the go, we can export a file with the missing tiles. Pan and zoom the map to an area which you want to export. Below the map you will find two links:</p> <p>Download missing tiles in visible area as GeoJSON or GPX.</p> <p>This export is available as GeoJSON or GPX such that you can open it with other applications. For instance with GPX See on Linux it looks like this when opening the GeoJSON file:</p> <p></p> <p>You can then upload the GeoJSON file to Bikerouter and it will display there:</p> <p></p> <p>Then plan a route that goes through as many tiles as possible. Download the route as GPX and use an app like OsmAnd to ride along it.</p>"},{"location":"plan-missing-tile-rides/#missing-tiles-on-the-go","title":"Missing tiles on the go","text":"<p>The above is nice to plan the route, perhaps you also want to take the missing tiles along to do spontaneous tile hunting.</p> <p>A possibility should be Organic Maps which is a FOSS app that can display offline maps and also show GPX files.</p> <p>Another method is to use Open Street Map uMap, either the one hosted in Germany or France. Then you can create a new personal map (consider limiting the access rights, default is public) and upload the GeoJSON file. Then you can use that map on the code to see your position and the missing tiles:</p> <p></p> <p>Yet another option is Offline Maps. That is able to display GeoJSON on Android, though one needs to buy the add-on for like 5 EUR.</p> <p>On Android one can use the OsmAnd app to display tracks and also try to visualize the missing tiles. Unfortunately GeoJSON is not supported, therefore one has to play some tricks. The missing tiles are also exported as a GPX file with a track for each missing tile. This looks strange, but it is a bit helpful with OsmAnd. This is how the file looks like in GPXSee:</p> <p></p> <p>And on OsmAnd such files look like this:</p> <p></p> <p>Unfortunately OsmAnd becomes a very sluggish with such a huge track imported, so make sure to only export it from rather small regions.</p>"},{"location":"plan-missing-tile-rides/#square-planner","title":"Square planner","text":"<p>From the explorer tile views you can open the square planner which allows you to see which tiles you need to explore in order to extend the square into a particular direction. The screen will open with the largest square that you have, then you can use the buttons to extend or move your square.</p> <p></p> <p>Using the buttons in the middle you can move the square, the buttons in the corners allow to extend or shrink the square.</p> <p>When you have selected the square that you want to target, you can download the missing files in for that square as GeoJSON or GPX.</p>"},{"location":"record-activities/","title":"Record Activities","text":"<p>Here you will learn ways to record outdoor activities such that you can analyze them with Geo Activity Playground later on.</p> <p>There are many different ways to record activities. These are a couple of suggestions:</p> <ul> <li>Use OsmAnd on an Android phone, enable the GPX recording extension and record your activities. Export the recorded tracks as GPX files into the file manager or Google Drive.</li> <li>Use OpenTracks on an Android phone and set up auto-export as GPX.</li> <li>Create an account with Strava and use the Strava App on Android or iOS to record your activities.</li> <li>Use an outdoor device that records activities and transfer activities to your computer via an USB cable or Strava integration. For instance the Garmin Venu Sq smartwatch records FIT files that can be accessed via the USB cable. (It also supports Strava via the Garmin app.)</li> <li>Use Organic Maps to record activities on an Android or iOS device.</li> </ul>"},{"location":"rename-activity-kinds/","title":"Rename Activity Kinds","text":"<p>Metadata and importing from several sources can be messy and in some cases Strava will export its acivity types/activity kinds under names like <code>root='Ride'</code> and not \u201cRide\u201d. That can lead to issues with tagging and the heatmap. In this case we have multiple, overlapping activity kinds for the same activity kinds.</p> <p>To fix this, go to Admin -&gt; Settings -&gt; Kind rename</p> <ul> <li>Type in the box to define how you want to reprocess your activities</li> <li>The Format is <code>Existing name =&gt; New name</code></li> <li>To rename <code>root='Ride'</code> to <code>Ride</code> put in <code>root='Ride' =&gt; Ride</code></li> <li>Click on \u201cSave\u201d, the system will then reprocess all affected activities</li> <li>This can take a few minutes depending on the amount of activities</li> </ul>"},{"location":"satellite-elevation-isnt-helpful/","title":"Satellite Elevation Isn\u2019t Helpful","text":"<p>As you can read in Elevation Gain from Noisy Data, there are certain problems when computing the elevation gain from the GPS measurements. Basically the jitter in the measurements yields to a lot of fake elevation gain when there was none.</p> <p>One way to improve the situation is to use a digital elevation model (DEM) where one takes elevation data from elsewhere and computes the elevation based on that. This makes sure that the elevation at every point is unique and doesn't depend on GPS measurement errors. One readily available source is the Copernicus DEM provided by the EU.</p> <p>One can download elevation maps with a resolution of roughly 30 m. Rendered in false-color, they look like this:</p> <p></p> <p>Integrating that into the project allows to compare them. The following is the elevation data extracted from Copernicus DEM:</p> <p></p> <p>As you can see, the bridge is taken as the lowest point. With a resolution of 30 m, the bridge likely isn't included. Hence the points have the elevation of the river and are much lower.</p> <p>Compare that to the data that was recorded with GPS and without a barometer:</p> <p></p> <p>Here the bridge is the highest point. However, the absolute numbers are wildly different. I have no idea why they are around 100 m. The Rhine river valley is rather around 50 m, so the DEM has better numbers.</p> <p>The problem is that when computing the elevation gain from the DEM data, it counts as if I went down to the river and back up. But that's not the case, I went up the ramp for the bridge and stayed on that level over the river.</p> <p>So although that data is good, it isn't of the right kind for this project.</p>"},{"location":"satellite-elevation-isnt-helpful/#lidar-data","title":"LiDAR data","text":"<p>Looking at Bike Router, which uses Sonny\u2019s LiDAR Digital Terrain Models of Europe, has a bit more accuracy. There the bridge seems to have a better height:</p> <p></p> <p>Perhaps it is worthwhile to integrate Sonny's data into this project at some point. It might be better than what is measured with cheap GPS trackers.</p>"},{"location":"satellite-elevation-isnt-helpful/#tunnels-and-overpasses","title":"Tunnels and overpasses","text":"<p>There still the fundamental issue that there can only be one elevation per coordinate. That means that if one has an intersection of a bridge and an underpass, the intersection point will have one particular value. And that value will be wrong for one of them. With a longer tunnel, this is even worse.</p> <p>So no matter how good the data is, the underlying assumption is already wrong. And therefore if one is interested in serious elevation gain data, one needs to invest into a better measurement device with a barometer.</p>"},{"location":"set-up-a-development-environment/","title":"Set Up a Development Environment","text":"<p>In this how-to you will find the necessary steps to set up a development environment to run the latest development version and contribute code and documentation changes.</p> <p>The following assumptions are made:</p> <ul> <li>You have some basic knowledge about the Git version control system.</li> <li>You have a programmer's code editor or IDE like VS Code or PyCharm installed.</li> </ul> <p>If you want to contribute changes, you will also need these:</p> <ul> <li>You know some Python (for contributing code) or Markdown (for contributing documentation).</li> <li>You have a GitHub account and have authentication via SSH set up or will use HTTPS.</li> <li>You know how to create a fork and a pull request.</li> </ul>"},{"location":"set-up-a-development-environment/#obtain-the-git-repository","title":"Obtain the Git repository","text":"<p>First you need to obtain the Git repository from GitHub. If you have a GitHub account and have set up your SSH key, then use SSH to clone:</p> <pre><code>git clone git@github.com:martin-ueding/geo-activity-playground.git\n</code></pre> <p>Otherwise use HTTPS:</p> <pre><code>git clone https://github.com/martin-ueding/geo-activity-playground.git\ncd geo-activity-playground\n</code></pre> <p>Either way you will now have a new directory <code>geo-activity-playground</code> which contains the code.</p>"},{"location":"set-up-a-development-environment/#set-up-poetry","title":"Set up Poetry","text":"<p>This project uses Poetry for dependency management.</p> <p>Unless you prefer a different method, install using <code>pipx</code> like so:</p> <pre><code>pipx install poetry\n</code></pre> <p>You might need to add local bin to path if you get \u201ccommand not found\u201d errors later on.</p> <p>Then you can create the development environment by letting Poetry download and install all the dependencies by executing this in the project directory:</p> <pre><code>poetry install\n</code></pre> <p>This is all what is needed regarding dependency management.</p>"},{"location":"set-up-a-development-environment/#set-up-the-pre-commit-hook","title":"Set up the pre-commit hook","text":"<p>This project also uses pre-commit to make sure that every commit is run through some formatters and checkers. If you only want to use the development version but not contribute, you can skip this section.</p> <p>Install pre-commit:</p> <pre><code>pipx install pre-commit\n</code></pre> <p>And then set it up in the project directory:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"set-up-a-development-environment/#open-your-editor-or-ide","title":"Open your editor or IDE","text":"<p>For your development environment to properly resolve all the packages, it needs to know about the virtual environment. Use Poetry to do that for you. To start VS Code (<code>code</code> on the command line), execute this from the project directory:</p> <pre><code>poetry run code .\n</code></pre>"},{"location":"set-up-a-development-environment/#starting-the-program","title":"Starting the program","text":"<p>In order to test your changes, you can run the server from the Git repository like so:</p> <pre><code>poetry run geo-activity-playground --basedir path/to/your/basedir serve\n</code></pre>"},{"location":"set-up-a-development-environment/#committing-changes","title":"Committing changes","text":"<p>Do your changes like in any other Python project. Commit them. Before the commit is finalized, the pre-commit hook will run and take care of import order and code formatting. It might happen that the commit command fails. Add the new changes and then try to commit again.</p> <p>Create a fork on GitHub. Push your code there. Open a pull request.</p>"},{"location":"similar-projects/","title":"Similar Projects","text":"<p>This project isn't the only one of its kind. There are a couple of other projects that might also be of interest to you.</p> <p>Open source projects:</p> <ul> <li>Wanderer: Self-hosted activity tracker with ActivityPub support.</li> <li>FitTrackee: Self-hosted activity tracker with upload functionality and multi-user support.</li> <li>CubeTrek: Self-hosted server for displaying activities with a focus on elevation data and 3D visualization.</li> </ul> <p>Recording:</p> <ul> <li>OpenTracks App: Records activities on Android, available via F-Droid store.</li> </ul> <p>Non-cloud analysis:</p> <ul> <li>Running Free by Michael Simons</li> <li>Strava local heatmap</li> </ul> <p>Analysis with cloud data:</p> <ul> <li>Statshunters: Statistical analysis of activities on Strava.</li> <li>VeloViewer: Statistical analysis of activities on Strava.</li> <li>Wandrer: Tracks which streets were covered, lets you walk all the streets of your city.</li> </ul> <p>Cloud platform for data:</p> <ul> <li>Strava</li> <li>Komoot</li> </ul>"},{"location":"starting-the-webserver/","title":"Starting the Program","text":"<p>Once you have installed the program and created a base directory, you will learn how to start the program in this how-to.</p> <p>On Linux, execute the following in the command line, where you need to replace <code>YOUR_BASEDIR</code> with the path to your base directory.</p> <pre><code>geo-activity-playground --basedir YOUR_BASEDIR serve\n</code></pre> <p>Should that fail with \u201ccommand not found\u201d, you need to add local bin to path.</p> <p>The webserver will start up and give you a bit of output like this:</p> <pre><code>2023-11-19 17:59:23 geo_activity_playground.importers.strava_api INFO Loading metadata file \u2026\n2023-11-19 17:59:23 stravalib.protocol.ApiV3 INFO GET 'https://www.strava.com/api/v3/athlete/activities' with params {'before': None, 'after': 1700392964, 'page': 1, 'per_page': 200}\n2023-11-19 17:59:23 geo_activity_playground.importers.strava_api INFO Checking for missing time series data \u2026\n * Serving Flask app 'geo_activity_playground.webui.app'\n * Debug mode: off\n2023-11-19 17:59:23 werkzeug INFO WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\n2023-11-19 17:59:23 werkzeug INFO Press CTRL+C to quit\n</code></pre> <p>The warning about the development server is fine. We are using this only to play around, not to power a web service for other users. There might be some more messages about downloading and parsing data. The first startup will take quite some time.</p> <p>Open http://127.0.0.1:5000 to open the website in your browser and you will see the user interface.</p>"},{"location":"starting-the-webserver/#setting-host-and-port","title":"Setting host and port","text":"<p>In case you don't like the default value of <code>127.0.0.1:5000</code>, you can use the optional command line arguments <code>--host</code> and <code>--port</code> to specify your values.</p>"},{"location":"time-zone-handling-sucks/","title":"Time Zone Handling Sucks","text":"<p>With an unnerving frequency, the topic of time zones comes up. Let me take you into this rabbit hole of horror, inconsistency and missing features.</p>"},{"location":"time-zone-handling-sucks/#time-zone-specifications","title":"Time zone specifications","text":"<p>The problem with time zones is that they inconsistently recorded. A second problem is that there are two ways of specifying them. These two ways seem equivalent until there is the daylight savings time switchover.</p> <p>I live in Germany, hence I am always in the \u201cEurope/Berlin\u201d time zone. That doesn't change. But the meaning of that changes twice a year. During winter, we \u201cEurope/Berlin\u201d means \u201cCentral European Time\u201d (\u201cCET\u201d in English, \u201cMEZ\u201d in German). The offset to UTC (Coordinated Universal Time) is +0100 then. During summer, Germany switches to \u201cCentral European Summer Time\u201d, \u201cCEST\u201d (or \u201cCentral European Daylight Time\u201d, \u201cCEDT\u201d in American English; \u201cMESZ\u201d in German). Then the UTC offset is +0200.</p> <p>To summarize: Germany is always in \u201cEurope/Berlin\u201d, but that might mean +0100 or +0200 depending on the date.</p>"},{"location":"time-zone-handling-sucks/#conversions","title":"Conversions","text":"<p>When we have a date and time combined, we can convert \u201cEurope/Berlin\u201d into +0100 or +0200, so that is fine.</p> <p>Let us take the time of writing, 2025-07-06 10:33:00 in Europe/Berlin. Since we have the date, we can deduct that it is daylight savings time here. Hence we can write this as 2025-07-06 10:33:00 +0200. With that offset we can convert that to UTC and write that as 2025-07-06 08:33:00 +0000.</p> <p>If I have only the offset, say +0200, I cannot convert that back into a named time zone. I might be able to pick something which makes sense at the moment, but it could either be \u201cEurope/Berlin\u201d in summer or \u201cEurope/Kyiv\u201d in winter. But it could also be \u201cAfrica/Cairo\u201d in winter. The problem is that not all countries have the daylight savings time switchover at the same time. Ukraine and Egypt are in different groups, so for a few weeks in a year, it becomes really important which city/country the time zone is from.</p>"},{"location":"time-zone-handling-sucks/#what-do-we-want","title":"What do we want?","text":"<p>There are two distinct purposes that a date time record has to provide:</p> <ol> <li>In what relation did that event happen in relation to another event?</li> <li>What did the clocks show at the pertinent location at the time?</li> </ol> <p>Say two people take pictures during an event with different cameras. In the end, one wants to sort all pictures chronologically. Then the photo software would have to figure out the absolute time. If one camera reports 2025-07-06 10:33:00 +0200, but the other 2025-07-06 08:33:00 +0000, then it would have to deduce that these are actually at the same time. It can do so, because it has the time zone information attached to it and correctly convert both to UTC and take the difference.</p> <p>One way to achieve this would be to convert all incoming dates into UTC and only store these. Then everything would be sanitized, all time zone information resolved and there were only UTC times. This is a nice state to be in as one doesn't have to worry about time zones any more.</p> <p>Except when you want to know what the clocks showed. For instance, the time of writing for this article is 10:33:00 +0200. What this tells you is that I am doing that in the late morning (10:33). But if we converted that to UTC, you would only see 08:33:00 +0000. Sure, if you knew that my local time zone is +0200, you could convert it. But we need to track the information.</p> <p>And actually, there can be a third question: What did my clock show during that event? Say you live in Helsinki, which is at +0300 during the summer. Then your clock would show 11:33:00 +0300. We can do this conversion from UTC or the local time zone of the event creator. But we need to know the user's time zone.</p>"},{"location":"time-zone-handling-sucks/#in-this-project","title":"In this project","text":"<p>Users in various time zones record outdoor activities with whatever device that they have. When displaying activities, we always want to show the local time of the activity. I have activities in Germany (+0100 or +0200), in Greece (+0300) and China (+0800). I don't care about comparing activity start times, I only care about the local times. Hence the local times is what I want.</p> <p>But when uploading pictures, we now need to figure out which activity they belong to. And then it becomes very important to figure out how the time of the activity and the time of the photo relate to. Hence we need to be able to convert everything into the same time zone, but it doesn't matter which one.</p> <p>Storing everything as UTC alone doesn't help, we lose the information about local time. Storing everything just in local time (but without time zone) doesn't allow to convert. It would even lead to ambiguities in case somebody goes for a run during the daylight savings time switchover. Hence the ideal storage would be local time plus time zone.</p>"},{"location":"time-zone-handling-sucks/#inconsistent-data","title":"Inconsistent data","text":"<p>If everything had a proper time zone (as region or UTC offset) attached, it would be easy. I could convert it to local time and keep track of the time zone. If I need to convert times, I could compute the differences properly.</p> <p>The problem is that the data that I get comes from various devices and I have no control over the formats. For instance, GPX files by Abvio contain the following:</p> <pre><code>&lt;desc&gt;Cyclemeter Row 21. Jun 2025 at 17.41.06&lt;/desc&gt;\n&lt;time&gt;2025-06-21T15:10:41Z&lt;/time&gt;\n&lt;trkpt lat=\"\u2026\" lon=\"\u2026\"&gt;&lt;ele&gt;137.7&lt;/ele&gt;&lt;time&gt;2025-06-21T14:41:06Z&lt;/time&gt;&lt;/trkpt&gt;\n...\n&lt;abvio:startTime&gt;2025-06-21 14:41:06.537&lt;/abvio:startTime&gt;\n&lt;abvio:startTimeZone&gt;Europe/Helsinki&lt;/abvio:startTimeZone&gt;\n</code></pre> <p>So the standardized fields contain UTC data, but there is a non-standard extension field which contains \u201cEurope/Helsinki\u201d. And it is not meant such that <code>startTime</code> is in <code>startTimeZone</code>, but rather <code>startTime</code> is UTC (although the \u201cZ\u201d is missing) and it should be converted into \u201cEurope/Helsinki\u201d.</p> <p>This can be resolved, but it annoying. If I just look at the standard field <code>time</code>, then I would import that as UTC and assume that the user is in +0000 time zone. All the times will look wrong. The activity is at 17:41, so late afternoon. It would show up as 14:41, so early afternoon.</p> <p>Something recorded with OsmAnd only shows UTC:</p> <pre><code>&lt;time&gt;2017-09-05T15:45:40Z&lt;/time&gt;\n</code></pre> <p>There is no other time zone information present, hence we cannot correct that to +0200.</p> <p>But Open Tracks records in local time zone with offset:</p> <pre><code>&lt;time&gt;2025-06-30T19:46:49.776+02:00&lt;/time&gt;\n</code></pre> <p>So that's usable.</p> <p>As we see here, the program gets fed data with UTC time stamps but we lack information about the local time. This means that this limitation needs to be cured by offering users to shift their activities by asking for the time zone that they should be in.</p>"},{"location":"time-zone-handling-sucks/#software-limitations","title":"Software limitations","text":"<p>As we've seen above, storing data in their local time zone with the time zone information is the best way. But there is a lot of software which is not time zone aware and can only work with naive times. Ouch.</p> <p>For the data analysis here I use <code>datetime64</code>, which doesn't support time zones in its basic NumPy variant:</p> <p>This is a \u201cnaive\u201d time, with no explicit notion of timezones or specific time scales \u2014 NumPy Documentation</p> <p>So when working with these data types, I need to get rid of the time zone. There are two ways:</p> <ol> <li>I can convert everything to UTC and only compute with that. This resolves all conflicts with jumps, but it will make all the times in plots wrong.</li> <li>I use only local times. But then I might run into problems if there have been jumps in the time as the time zone has suddenly changed.</li> </ol> <p>At the moment, the program is written with the second way. I have used the first way, but that was worse.</p> <p>But Pandas does support time zones in its <code>datetime64</code> type. So that's great.</p> <p>If we supply time zone aware data to Altair, it will pass that onto Vega and then the Browser will convert that into the local time zone. That's not what I want here, the activity should be displayed in the activity's time zone, not in the viewer's.</p> <p>On top of this, databases like SQLite have their own time zone and will convert dates back and forth. This doesn't make so much sense because I don't want to convert to the time zone of the database. The database should just store the times in the time zone of that time stamp. Likely that doesn't work, I would have to store the offset myself.</p>"},{"location":"upload-activity-files/","title":"Upload Activity Files","text":"<p>Some users don't want to restart the application each time they add new activities but run it on their home server. For this use case you can upload activities. This is protected by login, you have to set a password in the settings and log in.</p> <p>Once set up, you can upload new files which will be placed into the <code>Activities</code> directory within the base directory. If you have subdirectories there, you can also select them during the upload.</p> <p>After an activity is uploaded, it will be added to the database and displayed.</p>"},{"location":"using-git-version-via-docker-compose-and-tailscale-vpn/","title":"Using Git Version via Docker Compose and Tailscale VPN","text":"<p>Docker is a software that allows you to run Linux programs in a container. Docker Compose is a tool for defining multi-container Docker environments in a single YAML configuration file and deploy it with a single command.</p> <p>Tailscale is a VPN solution based on the Wireguard protocol which lets you connect all devices within your virtual private network (tailnet). The Tailscale Docker container exposes the services only via a direct VPN connection, which avoids exposing ports to the open internet to connect to your geo-activity-playground instance on-the-go. It provides a domain with a valid Let's Encrypt certificate which is only accessible via the tailnet. The configuration is based on Docker Tailscale Guide.</p> <p>This how-to will give you an example <code>compose.yml</code> that can build the geo-activity-playground docker image from Github and start this project within a Docker container and connecting it via Tailscale.</p>"},{"location":"using-git-version-via-docker-compose-and-tailscale-vpn/#tailscale-prerequisites","title":"Tailscale Prerequisites","text":"<ul> <li>Active account</li> <li>Enabled MagicDNS (in DNS section of admin console)</li> <li>Enabled HTTPS (in DNS section of admin console)</li> <li>Auth-Key</li> <li>ACL policy for tag</li> </ul>"},{"location":"using-git-version-via-docker-compose-and-tailscale-vpn/#create-auth-key-and-acl-policy-for-tag","title":"Create Auth-Key and ACL policy for tag","text":"<p>More information on generating auth keys Navigate to https://login.tailscale.com/admin/settings/keys and generate an auth key.</p> <p>Example Auth-Key configuration: - Description: docker - Reusable: yes - Expiration: 7 days - Ephemeral: No - Tags: tag:container</p> <p>In order to use the tag, it must first be defined in your Access control policy in the admin console. Set the same tag as in the Auth-Key.</p> <pre><code>\"tagOwners\": {\n    \"tag:container\": [\"autogroup:admin\"],\n},\n</code></pre> <p>When you apply a tag to a device for the first time and authenticate it, the tagged device's key expiry is disabled by default.</p>"},{"location":"using-git-version-via-docker-compose-and-tailscale-vpn/#preparing-tailscale-configuration","title":"Preparing Tailscale configuration","text":"<p>The geo-activity-playground service will be made available by using the Tailscale Serve functionality. It routes traffic from other devices on your Tailscale network (known as a tailnet) to a local service, in this case inside the container. It creates a reverse proxy to the geo-activity-playground container internal port 5000 (do not change it). <code>TS_CERT_DOMAIN</code> is comprised of a subdomain (hostname set in the <code>compose.yml</code>) and the tailnet root domain.</p> <pre><code>mkdir -p /docker/geo-activity-playground/{ts-state,ts-config}\ncd /docker/geo-activity-playground/ts-config\nnano geo-activity-playground.json\n</code></pre> <pre><code>{\n  \"TCP\": {\n    \"443\": {\n      \"HTTPS\": true\n    }\n  },\n  \"Web\": {\n    \"${TS_CERT_DOMAIN}:443\": {\n      \"Handlers\": {\n        \"/\": {\n          \"Proxy\": \"http://127.0.0.1:5000\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"using-git-version-via-docker-compose-and-tailscale-vpn/#compose-configuration-with-tailscale-network","title":"Compose configuration with Tailscale network","text":"<p>With these steps the playground folder (which contains the activities) will be located in the docker project folder. The location can be changed in the <code>compose.yml</code>.</p> <pre><code>mkdir -p /docker/geo-activity-playground/playground/Activities\ncd /docker/geo-activity-playground\nnano compose.yml\n</code></pre> <pre><code>services:\n  ts-geo-activity-playground:\n    image: tailscale/tailscale:latest\n    container_name: ts-geo-activity-playground\n    hostname: geo-activity-playground # set your desired name, which will be the tailscale subdomain\n    environment:\n      - TS_AUTHKEY=tskey-auth-yyyyyyyyyyyyyyyyyyyyyyyyyyyy # paste your created Auth-Key\n      - TS_EXTRA_ARGS=--advertise-tags=tag:container # set the same tag as in the Auth-Key\n      - TS_SERVE_CONFIG=/config/geo-activity-playground.json\n      - TS_STATE_DIR=/var/lib/tailscale\n    volumes:\n      - /docker/geo-activity-playground/ts-state:/var/lib/tailscale\n      - /docker/geo-activity-playground/ts-config:/config\n      - /dev/net/tun:/dev/net/tun\n    cap_add:\n      - net_admin\n      - sys_module\n    restart: unless-stopped\n  geo-activity:\n    build:\n      context: https://github.com/martin-ueding/geo-activity-playground.git\n      # this sets the build context to the DOCKERFILE located in the Github repository\n    container_name: geo-activity-playground\n    depends_on:\n      - ts-geo-activity-playground # start container after the VPN network is active\n    network_mode: service:ts-geo-activity-playground # link container network to tailscale container\n    volumes:\n      - /docker/geo-activity-playground/playground:/data # optional: change left side to your desired playground directory\n    restart: unless-stopped\n</code></pre> <p>If you want to build the release version of geo-activity-playground from Github instead, you can adjust the build context and add the release tag. <code>context: https://github.com/martin-ueding/geo-activity-playground.git#0.29.1</code></p>"},{"location":"using-git-version-via-docker-compose-and-tailscale-vpn/#building-image-and-running-container","title":"Building image and running container","text":"<p>You need to set up your files according to one of the presented methods, like activity files or the Strava API. Consult the other pages in the sidebar for the details.</p> <p>Once you have your playground directory, you can build the image and start the container.</p> <pre><code>docker compose build\ndocker compose up -d\n</code></pre> <p>This will start the webserver and expose it via your tailnet on <code>https://[HOSTNAME].[YourTailnetName].ts.net/</code>, eg. <code>https://geo-activity-playground.tail41a3.ts.net/</code>. In order to access your instance via that domain, you have to install and authenticate the Tailscale client app on your device you want to open it from.</p>"},{"location":"using-git-version-via-docker-compose-and-tailscale-vpn/#updating-the-image","title":"Updating the image","text":"<p>If using the tagged release version of geo-activity-playground, update the tag to the latest one first.</p> <pre><code>docker compose down\ndocker compose build\ndocker compose up -d --force-recreate\n</code></pre>"},{"location":"using-git-version-via-docker-compose/","title":"Using Git Version via Docker Compose","text":"<p>Docker is a software that allows you to run Linux programs in a container. Docker Compose is a tool for defining multi-container Docker environments in a single YAML configuration file and deploy it with a single command.</p> <p>This how-to will give you an example <code>compose.yml</code> that can build the geo-activity-playground docker image from Github and start this project within a Docker container.</p>"},{"location":"using-git-version-via-docker-compose/#creating-directory-structure-and-composeyml","title":"Creating directory structure and compose.yml","text":"<p>With these steps the playground folder (which contains the activities) will be located in the docker project folder. The location can be changed in the <code>compose.yml</code>.</p> <pre><code>mkdir -p /docker/geo-activity-playground/playground/Activities\ncd /docker/geo-activity-playground\nnano compose.yml\n</code></pre> <pre><code>services:\n  geo-activity:\n    build:\n      context: https://github.com/martin-ueding/geo-activity-playground.git\n      # this sets the build context to the DOCKERFILE located in the Github repository\n    container_name: geo-activity-playground\n    volumes:\n      - /docker/geo-activity-playground/playground:/data  # optional: change left side to your desired playground directory\n    ports:\n      - 5000:5000 # optional: change the exposed port on the left side\n    restart: unless-stopped\n</code></pre> <p>If you want to build the release version from Github instead, you can adjust the build context and add the release tag. <code>context: https://github.com/martin-ueding/geo-activity-playground.git#0.29.1</code></p>"},{"location":"using-git-version-via-docker-compose/#building-image-and-running-container","title":"Building image and running container","text":"<p>You need to set up your files according to one of the presented methods, like activity files or the Strava API. Consult the other pages in the sidebar for the details.</p> <p>Once you have your playground directory, you can build the image and start the container.</p> <pre><code>docker compose build\ndocker compose up -d\n</code></pre> <p>This will start the webserver on http://localhost:5000/ or at the port you chose to expose.</p> <p>Note that port 5000 may not be available on macOS because of AirPlay, so you can map to another port.</p>"},{"location":"using-git-version-via-docker-compose/#updating-the-image","title":"Updating the image","text":"<p>If using the tagged release version, update the tag to the latest one first.</p> <pre><code>docker compose down\ndocker compose build\ndocker compose up -d --force-recreate\n</code></pre>"},{"location":"using-git-version-via-docker/","title":"Using Git Version via Docker","text":"<p>Docker is a software that allows you to run Linux programs in a container. This how-to will show you how to build and start this project within a Docker container.</p>"},{"location":"using-git-version-via-docker/#build-the-image","title":"Build the image","text":"<p>First you need to build the Docker image. For this download the source code and build the image using the following commands:</p> <pre><code>git clone https://github.com/martin-ueding/geo-activity-playground.git\ncd geo-activity-playground\nsudo docker build -t geo-activity-playground .\n</code></pre> <p>Perhaps you do not need <code>sudo</code> on your system.</p>"},{"location":"using-git-version-via-docker/#run-the-image","title":"Run the image","text":"<p>You need to set up your files according to one of the presented methods, like activity files or the Strava API. Consult the other pages in the sidebar for the details.</p> <p>Once you have your playground directory, you can launch the Docker image with the following. Be sure to replace <code>path/to/playground</code> with your path.</p> <pre><code>sudo docker run -p 5000:5000 -v path/to/playground:/data -it geo-activity-playground\n</code></pre> <p>This will start the webserver on http://localhost:5000/.</p> <p>Note that port 5000 may not be available on macOS because of AirPlay, so you can map to another port by replacing the port specifier from above with <code>-p 8000:5000</code>. Then you can open http://localhost:8000/ in your browser.</p>"},{"location":"using-maps-as-overlays/","title":"Using Maps as Overlays","text":"<p>You can use the explorer tile maps and the heatmap as overlays elsewhere. For that, use the following URLs:</p> <p>For the base layers, you can use these URLs:</p> <pre><code>http://localhost:5000/tile/grayscale/{z}/{x}/{y}.png\nhttp://localhost:5000/tile/pastel/{z}/{x}/{y}.png\nhttp://localhost:5000/tile/color/{z}/{x}/{y}.png\nhttp://localhost:5000/tile/inverse_grayscale/{z}/{x}/{y}.png\n</code></pre> <p>For the explorer tiles, you can use these:</p> <pre><code>http://localhost:5000/explorer/14/tile/{z}/{x}/{y}.png?color_strategy=colorful_cluster\nhttp://localhost:5000/explorer/14/tile/{z}/{x}/{y}.png?color_strategy=max_cluster\nhttp://localhost:5000/explorer/14/tile/{z}/{x}/{y}.png?color_strategy=first\nhttp://localhost:5000/explorer/14/tile/{z}/{x}/{y}.png?color_strategy=last\nhttp://localhost:5000/explorer/14/tile/{z}/{x}/{y}.png?color_strategy=visits\nhttp://localhost:5000/explorer/14/tile/{z}/{x}/{y}.png?color_strategy=missing\n\nhttp://localhost:5000/explorer/17/tile/{z}/{x}/{y}.png?color_strategy=colorful_cluster\nhttp://localhost:5000/explorer/17/tile/{z}/{x}/{y}.png?color_strategy=max_cluster\nhttp://localhost:5000/explorer/17/tile/{z}/{x}/{y}.png?color_strategy=first\nhttp://localhost:5000/explorer/17/tile/{z}/{x}/{y}.png?color_strategy=last\nhttp://localhost:5000/explorer/17/tile/{z}/{x}/{y}.png?color_strategy=visits\nhttp://localhost:5000/explorer/17/tile/{z}/{x}/{y}.png?color_strategy=missing\n</code></pre> <p>And for the heatmap, you can use these:</p> <pre><code>http://localhost:5000/heatmap/tile/{z}/{x}/{y}.png\n</code></pre>"},{"location":"using-maps-as-overlays/#adding-them-to-bike-router","title":"Adding them to Bike Router","text":"<p>Go to Bike Router and then you can add these as overlay layers. I show it here with the explorer tiles on zoom 17 with the \"colorful cluster\" strategy:</p> <p></p> <p></p> <p></p> <p></p> <p>And now you can plan routes with your explorer tiles overlaid. Or add the heatmap. Or both.</p>"}]}